{"id":"5ba5a28627d322effe2049722d981b68","_format":"hh-sol-build-info-1","solcVersion":"0.8.8","solcLongVersion":"0.8.8+commit.dddeac2f","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\n */\npragma solidity ^0.8.0;\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \"./AutomationCompatibleInterface.sol\";\n"},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"contracts/Raffle.sol":{"content":"// Raffle\r\n// Enter the lottery (paying some amount)\r\n// Pick a random winner (verifiably random)\r\n// Winner to be selected every X minutes -> Completely automated\r\n// Chainlink oracle -> Randomness + Automated Execution (VRF + Chainlink Keepers)\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\"; // To change the functions of the CL contract for our own usage!\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\"; // To get in touch with the orginal contract!\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\"; // To make sure we wrote these functions!\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nerror Raffle__NotEnoughETHEntered();\r\nerror Raffle__TransferFailed();\r\nerror Raffle__NotOpen();\r\nerror Raffle__UpKeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\r\nerror Raffle__AlreadyEntered();\r\n\r\n/** @title A sample Raffle Contract\r\n *  @author Mert Kaya\r\n *  @notice This contract is for creating an untamperable de-cent smart contract\r\n *  @dev This implements Chainlink VRF v2 and Chainlink Keepers\r\n */\r\n\r\n// We need to implement an interface for showing the contract to how to connect with other contract's functions!\r\n\r\n// interface VRFCoordinatorV2Interface {\r\n//     function requestRandomWords(\r\n//         bytes32 keyHash,\r\n//         uint64 subId,\r\n//         uint16 minimumRequestConfirmations,\r\n//         uint32 callbackGasLimit,\r\n//         uint32 numWords\r\n//     ) external returns (uint256 requestId);\r\n// }\r\n\r\n// We apply inheritance on VRF2ConsumerBaseV2 for getting the fulfillRandomWords function\r\n\r\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\r\n    /* Type Declarations */\r\n    enum RaffleState {\r\n        OPEN,\r\n        CALCULATING\r\n    } // uint256 0 = OPEN, uint256 1 = CALCULATING\r\n\r\n    /* State Variables */\r\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator; // Address of the chainlink VRF Coordinator Contract\r\n    bytes32 private immutable i_gasLane; // Aka key hash value. Max gas price you are willing to pay for a request in wei\r\n    uint64 private immutable i_subscriptionId; // Subs ID that this contract uses for funding requests\r\n    uint32 private immutable i_callbackGasLimit; // The limit for how much gas to use for the callback request to your contract's fulfillRandomWords()\r\n    uint16 private constant REQUEST_CONFIRMATION = 3;\r\n    uint32 private constant NUM_WORDS = 1; // Random generated item count\r\n    address private raffleOwner;\r\n\r\n    // Lottery Variables\r\n    uint256 private immutable i_entranceFee; // Entrance fee to the lottery\r\n    address payable[] private s_players; // When one of the players wins, we need to pay them\r\n    address private s_recentWinner;\r\n    RaffleState private s_raffleState;\r\n    uint256 private s_lastTimeStamp;\r\n    uint256 private interval;\r\n\r\n    /* Events */\r\n    event RaffleEnter(address indexed player);\r\n    event RequestedRaffleWinner(uint256 indexed requestId);\r\n    event WinnerPicked(address indexed winner);\r\n\r\n    // We have the address being passed to VRFConsumerBaseV2\r\n    // VRFConsumerBaseV2 is the contract that makes sure the generation of VRF\r\n    // We need to pass VRFConsumerBaseV2's constructor and pass that vrfCoordinatorV2\r\n    // vrfCoordinatorV2 is the address of the contract that does the random number verification\r\n    constructor(\r\n        address vrfCoordinatorV2,\r\n        uint256 entranceFee,\r\n        bytes32 gasLane,\r\n        uint64 subscriptionId,\r\n        uint32 callbackGasLimit,\r\n        uint256 _interval\r\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\r\n        i_entranceFee = entranceFee;\r\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2); // Now we can connect with the CL contracts for corresponding networks\r\n        i_gasLane = gasLane;\r\n        i_subscriptionId = subscriptionId;\r\n        i_callbackGasLimit = callbackGasLimit;\r\n        s_raffleState = RaffleState.OPEN;\r\n        s_lastTimeStamp = block.timestamp;\r\n        interval = _interval;\r\n        raffleOwner = msg.sender;\r\n    }\r\n\r\n    modifier checkIfAlreadyEntered() {\r\n        for (uint i = 0; i < s_players.length; i++) {\r\n            if (s_players[i] == msg.sender) revert Raffle__AlreadyEntered();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkIfRaffleStateOpen() {\r\n        if (s_raffleState != RaffleState.OPEN) revert Raffle__NotOpen();\r\n        _;\r\n    }\r\n\r\n    modifier checkIfEnoughEthEntered() {\r\n        if (msg.value < i_entranceFee) revert Raffle__NotEnoughETHEntered();\r\n        _;\r\n    }\r\n\r\n    function enterRaffle()\r\n        public\r\n        payable\r\n        checkIfRaffleStateOpen\r\n        checkIfAlreadyEntered\r\n        checkIfEnoughEthEntered\r\n    {\r\n        // require(msg.value < i_entraceFee, \"Not Enough ETH!\");\r\n        s_players.push(payable(msg.sender));\r\n        // Emit an event when we update a dynamic array or mapping\r\n        // Named events with the function name reversed\r\n        emit RaffleEnter(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev This is the function that the Chainlink Keeper nodes call\r\n     * they look for the `upkeepNeeded` to return true.\r\n     * The following should be true in order to return true.\r\n     * 1. Our time interval should have passed\r\n     * 2. The lottery should have at least 1 player, and have some ETH\r\n     * 3. Our subscription is funded with LINK\r\n     * 4. The lottery should be in an \"open\" state.\r\n     * Smg that we want to avoid when we are waiting for a random number to return and when we have requested a random winner, we are technically\r\n     * in this weird limbo state where we are waiting for a random number to be returned, and we really shouldn't allow any new players to join.\r\n     * So we need to create a state variable telling us whether the lottery is open or not, and while we are waiting for a random number to\r\n     * get back, we will be in a closed or a calculated state.\r\n     *\r\n     */\r\n\r\n    // We define some conditions to be checked in order to run performUpKeep function!\r\n    // Off-chain computation, a node runs the checkUpkeep function.\r\n    // If it returns upkeepNeeded then it will run performUpkeep on chain.\r\n    // Generate data off-chain and if it returns true, then we run performUpKeep in the chain.\r\n\r\n    // KeeperCompatibleInterface\r\n\r\n    function checkUpkeep(\r\n        bytes memory /* checkData */\r\n    ) public view override returns (bool upkeepNeeded, bytes memory /* performData */) {\r\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\r\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > interval);\r\n        bool hasPlayers = (s_players.length > 0);\r\n        bool hasBalance = address(this).balance > 0;\r\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\r\n        return (upkeepNeeded, \"\");\r\n\r\n        // If upkeepNeded is true, its time to end the lottery and it's time to request a new VRF\r\n        // block.timestamp - last block timestamp > interval  To calculate if enough time is passed, we need to subtract last block timestamp\r\n        // interval is gonna be a some number is seconds to determine how long we want to wait between lottery runs.\r\n    }\r\n\r\n    // Having this checkData be a type bytes means that we can even specify this to call other functions.\r\n    // There is a lot of advanced things you can do by just having input parameter as type of bytes.\r\n    // However for now, we are not gonna use this checkData piece.\r\n\r\n    // 14:47:50 Rename requestRandomWinner() to performUpKeep(bytes calldata /* performData */)\r\n\r\n    // KeeperCompatibleInterface\r\n    function performUpkeep(\r\n        bytes calldata /* performData */ // calldata actually doesn't work with strings\r\n    ) external override {\r\n        // This func will be called by the chanlink keeper network so that it will run automatically without us having to interact with it\r\n        // 1 - Request the random number\r\n        // 2 - Once we get it, do smg with it\r\n        // 2 txn process\r\n        /* Having random numbers in 2 txns is actually also much better than having it in one. It it was just 1 txn, then people just brute force tries simulating\r\n         calling this txn to see what they can manipulate to make sure that they are the winner. We want to make sure that this is absolutely fair. This func\r\n         gonna request it and then in a second func random number to number is gonna be returned and then the txn that we actually get the random number from\r\n         the chain link network that's when we are gonna actually send the money to the winner. The func that calls VRF is fullfillRandomWords \r\n        */\r\n        // We are gonna set this up so that the CL Keepers call this on an interval.\r\n\r\n        (bool upKeepNeeded, ) = checkUpkeep(\"\");\r\n        if (!upKeepNeeded) {\r\n            revert Raffle__UpKeepNotNeeded(\r\n                address(this).balance,\r\n                s_players.length,\r\n                uint256(s_raffleState)\r\n            ); // We are gonna pass some vars so whoever was running into this bug can see why they are getting this error\r\n        }\r\n\r\n        s_raffleState = RaffleState.CALCULATING;\r\n\r\n        // Which requests to the contract for corresponding network i_vrfCoordinator.requestRandomWords\r\n        // VRFCoordinatorV2Interface\r\n\r\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\r\n            i_gasLane, //keyHash, //gasLane\r\n            i_subscriptionId,\r\n            REQUEST_CONFIRMATION,\r\n            i_callbackGasLimit,\r\n            NUM_WORDS\r\n        );\r\n        // This is redundant since VRFCoordinatorV2 already emits that parameter. But for this course we leave it\r\n        emit RequestedRaffleWinner(requestId);\r\n    }\r\n\r\n    // When we trigger the i_vrfCoordinator.requestRandomWords, it gives us a random number inside randomWords[0]. Since we write the\r\n    // i_vrfCoordinator.requestRandomWords inside performUpKeep, it's gonna create random variable periodically in terms of our defined\r\n    // conditions inside checkUpKeep.\r\n\r\n    // In order to call fulfillRandomWords, we are passing VRFConsumerBaseV2\r\n\r\n    function fulfillRandomWords(\r\n        uint256 /*requestId*/, // Since we dont use requestId, but we still need. It's like hey we know u need uint256 but we won't use requestId\r\n        uint256[] memory randomWords\r\n    ) internal override {\r\n        // s_players size 10\r\n        // randomNumber 200\r\n        // 202 % 10 = 2\r\n        // ..... bla bla bla many condes to get randomWords !!!\r\n\r\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\r\n        address payable recentWinner = s_players[indexOfWinner];\r\n        s_recentWinner = recentWinner;\r\n        s_raffleState = RaffleState.OPEN; // Reset the RaffleState\r\n        s_players = new address payable[](0); // Reset the s_players array!!!\r\n        s_lastTimeStamp = block.timestamp;\r\n\r\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\"\"); // Send all the money inside the contract!\r\n\r\n        // require(success)\r\n        if (!success) {\r\n            revert Raffle__TransferFailed();\r\n        }\r\n        emit WinnerPicked(recentWinner);\r\n    }\r\n\r\n    function getEntranceFee() public view returns (uint256) {\r\n        return i_entranceFee;\r\n    }\r\n\r\n    function getPlayer(uint256 index) public view returns (address) {\r\n        return s_players[index];\r\n    }\r\n\r\n    function getRecentWinner() public view returns (address) {\r\n        return s_recentWinner;\r\n    }\r\n\r\n    function getRaffleState() public view returns (RaffleState) {\r\n        return s_raffleState;\r\n    }\r\n\r\n    function getNumWords() public pure returns (uint256) {\r\n        return NUM_WORDS; // It doesn't read from storage\r\n    }\r\n\r\n    function getNumberOfPlayers() public view returns (uint256) {\r\n        return s_players.length;\r\n    }\r\n\r\n    function getInterval() public view returns (uint256) {\r\n        return interval;\r\n    }\r\n\r\n    function updateInterval(uint _interval) public {\r\n        require(msg.sender == raffleOwner, \"Only raffleOwner can change the interval\");\r\n        interval = _interval;\r\n    }\r\n\r\n    function getLatestTimeStamp() public view returns (uint256) {\r\n        return s_lastTimeStamp;\r\n    }\r\n\r\n    function getRequestConfirmations() public pure returns (uint256) {\r\n        return REQUEST_CONFIRMATION;\r\n    }\r\n\r\n    function moneyInContract() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getRaffleOwner() public view returns (address) {\r\n        return raffleOwner;\r\n    }\r\n}\r\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[57]},"id":58,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"57:5275:0","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":57,"linearizedBaseContracts":[57],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:0","nodeType":"ContractDefinition","nodes":[{"id":8,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:0","nodeType":"ErrorDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"have","nameLocation":"5413:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5405:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"want","nameLocation":"5427:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5419:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:0"},"src":"5373:60:0"},{"constant":false,"id":10,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:0","nodeType":"VariableDeclaration","scope":57,"src":"5436:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":20,"nodeType":"Block","src":"5593:43:0","statements":[{"expression":{"id":18,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":16,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"5599:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":17,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"5616:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":19,"nodeType":"ExpressionStatement","src":"5599:32:0"}]},"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"5481:72:0","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":21,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:0","nodeType":"VariableDeclaration","scope":21,"src":"5568:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"5593:0:0"},"scope":57,"src":"5556:80:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"5640:686:0","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":30,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:0","nodeType":"VariableDeclaration","scope":30,"src":"6357:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":23,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:0","nodeType":"VariableDeclaration","scope":30,"src":"6376:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":26,"nodeType":"ArrayTypeName","src":"6376:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"6422:0:0"},"scope":57,"src":"6329:94:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":55,"nodeType":"Block","src":"6707:167:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":38,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6717:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":40,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6731:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49,"nodeType":"IfStatement","src":"6713:109:0","trueBody":{"id":48,"nodeType":"Block","src":"6747:75:0","statements":[{"errorCall":{"arguments":[{"expression":{"id":43,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6788:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":45,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6800:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":42,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"6762:25:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6762:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47,"nodeType":"RevertStatement","src":"6755:60:0"}]}},{"expression":{"arguments":[{"id":51,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"6846:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":52,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"6857:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":50,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"6827:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6827:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":54,"nodeType":"ExpressionStatement","src":"6827:42:0"}]},"functionSelector":"1fe543e3","id":56,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:0","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:0","nodeType":"VariableDeclaration","scope":56,"src":"6649:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:0","nodeType":"VariableDeclaration","scope":56,"src":"6668:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":33,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":34,"nodeType":"ArrayTypeName","src":"6668:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"6707:0:0"},"scope":57,"src":"6618:256:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":58,"src":"5333:1543:0","usedErrors":[8]}],"src":"32:6845:0"},"id":0},"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","exportedSymbols":{"AutomationCompatibleInterface":[76]},"id":77,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":59,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":76,"linearizedBaseContracts":[76],"name":"AutomationCompatibleInterface","nameLocation":"67:29:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"101:985:1","text":" @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."},"functionSelector":"6e04ff0d","id":69,"implemented":false,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"1098:11:1","nodeType":"FunctionDefinition","parameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"checkData","nameLocation":"1125:9:1","nodeType":"VariableDeclaration","scope":69,"src":"1110:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":61,"name":"bytes","nodeType":"ElementaryTypeName","src":"1110:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1109:26:1"},"returnParameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"1159:12:1","nodeType":"VariableDeclaration","scope":69,"src":"1154:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":64,"name":"bool","nodeType":"ElementaryTypeName","src":"1154:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"performData","nameLocation":"1186:11:1","nodeType":"VariableDeclaration","scope":69,"src":"1173:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":66,"name":"bytes","nodeType":"ElementaryTypeName","src":"1173:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1153:45:1"},"scope":76,"src":"1089:110:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"1203:1003:1","text":" @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."},"functionSelector":"4585e33b","id":75,"implemented":false,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2218:13:1","nodeType":"FunctionDefinition","parameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"performData","nameLocation":"2247:11:1","nodeType":"VariableDeclaration","scope":75,"src":"2232:26:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":71,"name":"bytes","nodeType":"ElementaryTypeName","src":"2232:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2231:28:1"},"returnParameters":{"id":74,"nodeType":"ParameterList","parameters":[],"src":"2268:0:1"},"scope":76,"src":"2209:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":77,"src":"57:2214:1","usedErrors":[]}],"src":"32:2240:1"},"id":1},"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","exportedSymbols":{"KeeperCompatibleInterface":[76]},"id":81,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":78,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"134:23:2"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","file":"./AutomationCompatibleInterface.sol","id":80,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":77,"src":"158:111:2","symbolAliases":[{"foreign":{"id":79,"name":"AutomationCompatibleInterface","nodeType":"Identifier","overloadedDeclarations":[],"src":"166:29:2","typeDescriptions":{}},"local":"KeeperCompatibleInterface","nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"134:136:2"},"id":2},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[176]},"id":177,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":82,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:3"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":176,"linearizedBaseContracts":[176],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"97:267:3","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":93,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:3","nodeType":"FunctionDefinition","parameters":{"id":84,"nodeType":"ParameterList","parameters":[],"src":"392:2:3"},"returnParameters":{"id":92,"nodeType":"ParameterList","parameters":[{"constant":false,"id":86,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":93,"src":"437:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":85,"name":"uint16","nodeType":"ElementaryTypeName","src":"437:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":88,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":93,"src":"451:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":87,"name":"uint32","nodeType":"ElementaryTypeName","src":"451:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":91,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":93,"src":"465:16:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":89,"name":"bytes32","nodeType":"ElementaryTypeName","src":"465:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":90,"nodeType":"ArrayTypeName","src":"465:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"429:58:3"},"scope":176,"src":"367:121:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":94,"nodeType":"StructuredDocumentation","src":"492:1511:3","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":109,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"2015:18:3","nodeType":"FunctionDefinition","parameters":{"id":105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":96,"mutability":"mutable","name":"keyHash","nameLocation":"2047:7:3","nodeType":"VariableDeclaration","scope":109,"src":"2039:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":95,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2039:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":98,"mutability":"mutable","name":"subId","nameLocation":"2067:5:3","nodeType":"VariableDeclaration","scope":109,"src":"2060:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":97,"name":"uint64","nodeType":"ElementaryTypeName","src":"2060:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2085:27:3","nodeType":"VariableDeclaration","scope":109,"src":"2078:34:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":99,"name":"uint16","nodeType":"ElementaryTypeName","src":"2078:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2125:16:3","nodeType":"VariableDeclaration","scope":109,"src":"2118:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":101,"name":"uint32","nodeType":"ElementaryTypeName","src":"2118:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":104,"mutability":"mutable","name":"numWords","nameLocation":"2154:8:3","nodeType":"VariableDeclaration","scope":109,"src":"2147:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":103,"name":"uint32","nodeType":"ElementaryTypeName","src":"2147:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2033:133:3"},"returnParameters":{"id":108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":107,"mutability":"mutable","name":"requestId","nameLocation":"2193:9:3","nodeType":"VariableDeclaration","scope":109,"src":"2185:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":106,"name":"uint256","nodeType":"ElementaryTypeName","src":"2185:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2184:19:3"},"scope":176,"src":"2006:198:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":110,"nodeType":"StructuredDocumentation","src":"2208:384:3","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":115,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2604:18:3","nodeType":"FunctionDefinition","parameters":{"id":111,"nodeType":"ParameterList","parameters":[],"src":"2622:2:3"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"subId","nameLocation":"2650:5:3","nodeType":"VariableDeclaration","scope":115,"src":"2643:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":112,"name":"uint64","nodeType":"ElementaryTypeName","src":"2643:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2642:14:3"},"scope":176,"src":"2595:62:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"2661:381:3","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":130,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3054:15:3","nodeType":"FunctionDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"subId","nameLocation":"3077:5:3","nodeType":"VariableDeclaration","scope":130,"src":"3070:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":117,"name":"uint64","nodeType":"ElementaryTypeName","src":"3070:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3069:14:3"},"returnParameters":{"id":129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"mutability":"mutable","name":"balance","nameLocation":"3133:7:3","nodeType":"VariableDeclaration","scope":130,"src":"3126:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":120,"name":"uint96","nodeType":"ElementaryTypeName","src":"3126:6:3","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":123,"mutability":"mutable","name":"reqCount","nameLocation":"3155:8:3","nodeType":"VariableDeclaration","scope":130,"src":"3148:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":122,"name":"uint64","nodeType":"ElementaryTypeName","src":"3148:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":125,"mutability":"mutable","name":"owner","nameLocation":"3179:5:3","nodeType":"VariableDeclaration","scope":130,"src":"3171:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":124,"name":"address","nodeType":"ElementaryTypeName","src":"3171:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":128,"mutability":"mutable","name":"consumers","nameLocation":"3209:9:3","nodeType":"VariableDeclaration","scope":130,"src":"3192:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":126,"name":"address","nodeType":"ElementaryTypeName","src":"3192:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":127,"nodeType":"ArrayTypeName","src":"3192:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3118:106:3"},"scope":176,"src":"3045:180:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":131,"nodeType":"StructuredDocumentation","src":"3229:164:3","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":138,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3405:32:3","nodeType":"FunctionDefinition","parameters":{"id":136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":133,"mutability":"mutable","name":"subId","nameLocation":"3445:5:3","nodeType":"VariableDeclaration","scope":138,"src":"3438:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":132,"name":"uint64","nodeType":"ElementaryTypeName","src":"3438:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":135,"mutability":"mutable","name":"newOwner","nameLocation":"3460:8:3","nodeType":"VariableDeclaration","scope":138,"src":"3452:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":134,"name":"address","nodeType":"ElementaryTypeName","src":"3452:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:32:3"},"returnParameters":{"id":137,"nodeType":"ParameterList","parameters":[],"src":"3478:0:3"},"scope":176,"src":"3396:83:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":139,"nodeType":"StructuredDocumentation","src":"3483:212:3","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":144,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3707:31:3","nodeType":"FunctionDefinition","parameters":{"id":142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":141,"mutability":"mutable","name":"subId","nameLocation":"3746:5:3","nodeType":"VariableDeclaration","scope":144,"src":"3739:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":140,"name":"uint64","nodeType":"ElementaryTypeName","src":"3739:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3738:14:3"},"returnParameters":{"id":143,"nodeType":"ParameterList","parameters":[],"src":"3761:0:3"},"scope":176,"src":"3698:64:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":145,"nodeType":"StructuredDocumentation","src":"3766:170:3","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":152,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3948:11:3","nodeType":"FunctionDefinition","parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"subId","nameLocation":"3967:5:3","nodeType":"VariableDeclaration","scope":152,"src":"3960:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":146,"name":"uint64","nodeType":"ElementaryTypeName","src":"3960:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":149,"mutability":"mutable","name":"consumer","nameLocation":"3982:8:3","nodeType":"VariableDeclaration","scope":152,"src":"3974:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":148,"name":"address","nodeType":"ElementaryTypeName","src":"3974:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3959:32:3"},"returnParameters":{"id":151,"nodeType":"ParameterList","parameters":[],"src":"4000:0:3"},"scope":176,"src":"3939:62:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":153,"nodeType":"StructuredDocumentation","src":"4005:172:3","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":160,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4189:14:3","nodeType":"FunctionDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":155,"mutability":"mutable","name":"subId","nameLocation":"4211:5:3","nodeType":"VariableDeclaration","scope":160,"src":"4204:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":154,"name":"uint64","nodeType":"ElementaryTypeName","src":"4204:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":157,"mutability":"mutable","name":"consumer","nameLocation":"4226:8:3","nodeType":"VariableDeclaration","scope":160,"src":"4218:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":156,"name":"address","nodeType":"ElementaryTypeName","src":"4218:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4203:32:3"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"4244:0:3"},"scope":176,"src":"4180:65:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":161,"nodeType":"StructuredDocumentation","src":"4249:140:3","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":168,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4401:18:3","nodeType":"FunctionDefinition","parameters":{"id":166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":163,"mutability":"mutable","name":"subId","nameLocation":"4427:5:3","nodeType":"VariableDeclaration","scope":168,"src":"4420:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":162,"name":"uint64","nodeType":"ElementaryTypeName","src":"4420:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":165,"mutability":"mutable","name":"to","nameLocation":"4442:2:3","nodeType":"VariableDeclaration","scope":168,"src":"4434:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":164,"name":"address","nodeType":"ElementaryTypeName","src":"4434:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:26:3"},"returnParameters":{"id":167,"nodeType":"ParameterList","parameters":[],"src":"4454:0:3"},"scope":176,"src":"4392:63:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":175,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4760:20:3","nodeType":"FunctionDefinition","parameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":170,"mutability":"mutable","name":"subId","nameLocation":"4788:5:3","nodeType":"VariableDeclaration","scope":175,"src":"4781:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":169,"name":"uint64","nodeType":"ElementaryTypeName","src":"4781:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4780:14:3"},"returnParameters":{"id":174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":175,"src":"4818:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":172,"name":"bool","nodeType":"ElementaryTypeName","src":"4818:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4817:6:3"},"scope":176,"src":"4751:73:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":177,"src":"57:4769:3","usedErrors":[]}],"src":"32:4795:3"},"id":3},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[230]},"id":231,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":178,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:4"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":179,"nodeType":"StructuredDocumentation","src":"137:750:4","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":230,"linearizedBaseContracts":[230],"name":"ReentrancyGuard","nameLocation":"906:15:4","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":182,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1701:12:4","nodeType":"VariableDeclaration","scope":230,"src":"1676:41:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":180,"name":"uint256","nodeType":"ElementaryTypeName","src":"1676:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1716:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":185,"mutability":"constant","name":"_ENTERED","nameLocation":"1748:8:4","nodeType":"VariableDeclaration","scope":230,"src":"1723:37:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":183,"name":"uint256","nodeType":"ElementaryTypeName","src":"1723:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1759:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":187,"mutability":"mutable","name":"_status","nameLocation":"1783:7:4","nodeType":"VariableDeclaration","scope":230,"src":"1767:23:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"1767:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":194,"nodeType":"Block","src":"1811:39:4","statements":[{"expression":{"id":192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":190,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1821:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":191,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"1831:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1821:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":193,"nodeType":"ExpressionStatement","src":"1821:22:4"}]},"id":195,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":188,"nodeType":"ParameterList","parameters":[],"src":"1808:2:4"},"returnParameters":{"id":189,"nodeType":"ParameterList","parameters":[],"src":"1811:0:4"},"scope":230,"src":"1797:53:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":205,"nodeType":"Block","src":"2251:79:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":198,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"2261:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2261:21:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":200,"nodeType":"ExpressionStatement","src":"2261:21:4"},{"id":201,"nodeType":"PlaceholderStatement","src":"2292:1:4"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":202,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"2303:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2303:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":204,"nodeType":"ExpressionStatement","src":"2303:20:4"}]},"documentation":{"id":196,"nodeType":"StructuredDocumentation","src":"1856:366:4","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":206,"name":"nonReentrant","nameLocation":"2236:12:4","nodeType":"ModifierDefinition","parameters":{"id":197,"nodeType":"ParameterList","parameters":[],"src":"2248:2:4"},"src":"2227:103:4","virtual":false,"visibility":"internal"},{"body":{"id":220,"nodeType":"Block","src":"2375:248:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":210,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"2468:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":211,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"2479:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2468:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2489:33:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":209,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2460:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2460:63:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":215,"nodeType":"ExpressionStatement","src":"2460:63:4"},{"expression":{"id":218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":216,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"2598:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":217,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"2608:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2598:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":219,"nodeType":"ExpressionStatement","src":"2598:18:4"}]},"id":221,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2345:19:4","nodeType":"FunctionDefinition","parameters":{"id":207,"nodeType":"ParameterList","parameters":[],"src":"2364:2:4"},"returnParameters":{"id":208,"nodeType":"ParameterList","parameters":[],"src":"2375:0:4"},"scope":230,"src":"2336:287:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":228,"nodeType":"Block","src":"2667:171:4","statements":[{"expression":{"id":226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":224,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"2809:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":225,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"2819:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2809:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":227,"nodeType":"ExpressionStatement","src":"2809:22:4"}]},"id":229,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2638:18:4","nodeType":"FunctionDefinition","parameters":{"id":222,"nodeType":"ParameterList","parameters":[],"src":"2656:2:4"},"returnParameters":{"id":223,"nodeType":"ParameterList","parameters":[],"src":"2667:0:4"},"scope":230,"src":"2629:209:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":231,"src":"888:1952:4","usedErrors":[]}],"src":"112:2729:4"},"id":4},"contracts/Raffle.sol":{"ast":{"absolutePath":"contracts/Raffle.sol","exportedSymbols":{"KeeperCompatibleInterface":[76],"Raffle":[742],"Raffle__AlreadyEntered":[252],"Raffle__NotEnoughETHEntered":[238],"Raffle__NotOpen":[242],"Raffle__TransferFailed":[240],"Raffle__UpKeepNotNeeded":[250],"ReentrancyGuard":[230],"VRFConsumerBaseV2":[57],"VRFCoordinatorV2Interface":[176]},"id":743,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":232,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"285:23:5"},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","id":233,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":743,"sourceUnit":58,"src":"312:61:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":234,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":743,"sourceUnit":177,"src":"440:80:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","id":235,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":743,"sourceUnit":81,"src":"568:80:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","file":"@openzeppelin/contracts/security/ReentrancyGuard.sol","id":236,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":743,"sourceUnit":231,"src":"692:62:5","symbolAliases":[],"unitAlias":""},{"id":238,"name":"Raffle__NotEnoughETHEntered","nameLocation":"764:27:5","nodeType":"ErrorDefinition","parameters":{"id":237,"nodeType":"ParameterList","parameters":[],"src":"791:2:5"},"src":"758:36:5"},{"id":240,"name":"Raffle__TransferFailed","nameLocation":"802:22:5","nodeType":"ErrorDefinition","parameters":{"id":239,"nodeType":"ParameterList","parameters":[],"src":"824:2:5"},"src":"796:31:5"},{"id":242,"name":"Raffle__NotOpen","nameLocation":"835:15:5","nodeType":"ErrorDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[],"src":"850:2:5"},"src":"829:24:5"},{"id":250,"name":"Raffle__UpKeepNotNeeded","nameLocation":"861:23:5","nodeType":"ErrorDefinition","parameters":{"id":249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":244,"mutability":"mutable","name":"currentBalance","nameLocation":"893:14:5","nodeType":"VariableDeclaration","scope":250,"src":"885:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":243,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":246,"mutability":"mutable","name":"numPlayers","nameLocation":"917:10:5","nodeType":"VariableDeclaration","scope":250,"src":"909:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":245,"name":"uint256","nodeType":"ElementaryTypeName","src":"909:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":248,"mutability":"mutable","name":"raffleState","nameLocation":"937:11:5","nodeType":"VariableDeclaration","scope":250,"src":"929:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":247,"name":"uint256","nodeType":"ElementaryTypeName","src":"929:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"884:65:5"},"src":"855:95:5"},{"id":252,"name":"Raffle__AlreadyEntered","nameLocation":"958:22:5","nodeType":"ErrorDefinition","parameters":{"id":251,"nodeType":"ParameterList","parameters":[],"src":"980:2:5"},"src":"952:31:5"},{"abstract":false,"baseContracts":[{"baseName":{"id":254,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1732:17:5"},"id":255,"nodeType":"InheritanceSpecifier","src":"1732:17:5"},{"baseName":{"id":256,"name":"KeeperCompatibleInterface","nodeType":"IdentifierPath","referencedDeclaration":76,"src":"1751:25:5"},"id":257,"nodeType":"InheritanceSpecifier","src":"1751:25:5"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":253,"nodeType":"StructuredDocumentation","src":"987:210:5","text":"@title A sample Raffle Contract\n  @author Mert Kaya\n  @notice This contract is for creating an untamperable de-cent smart contract\n  @dev This implements Chainlink VRF v2 and Chainlink Keepers"},"fullyImplemented":true,"id":742,"linearizedBaseContracts":[742,76,57],"name":"Raffle","nameLocation":"1722:6:5","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Raffle.RaffleState","id":260,"members":[{"id":258,"name":"OPEN","nameLocation":"1841:4:5","nodeType":"EnumValue","src":"1841:4:5"},{"id":259,"name":"CALCULATING","nameLocation":"1856:11:5","nodeType":"EnumValue","src":"1856:11:5"}],"name":"RaffleState","nameLocation":"1818:11:5","nodeType":"EnumDefinition","src":"1813:61:5"},{"constant":false,"id":263,"mutability":"immutable","name":"i_vrfCoordinator","nameLocation":"1998:16:5","nodeType":"VariableDeclaration","scope":742,"src":"1954:60:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":262,"nodeType":"UserDefinedTypeName","pathNode":{"id":261,"name":"VRFCoordinatorV2Interface","nodeType":"IdentifierPath","referencedDeclaration":176,"src":"1954:25:5"},"referencedDeclaration":176,"src":"1954:25:5","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":265,"mutability":"immutable","name":"i_gasLane","nameLocation":"2100:9:5","nodeType":"VariableDeclaration","scope":742,"src":"2074:35:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":264,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2074:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":267,"mutability":"immutable","name":"i_subscriptionId","nameLocation":"2222:16:5","nodeType":"VariableDeclaration","scope":742,"src":"2197:41:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":266,"name":"uint64","nodeType":"ElementaryTypeName","src":"2197:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":false,"id":269,"mutability":"immutable","name":"i_callbackGasLimit","nameLocation":"2326:18:5","nodeType":"VariableDeclaration","scope":742,"src":"2301:43:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":268,"name":"uint32","nodeType":"ElementaryTypeName","src":"2301:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"constant":true,"id":272,"mutability":"constant","name":"REQUEST_CONFIRMATION","nameLocation":"2477:20:5","nodeType":"VariableDeclaration","scope":742,"src":"2453:48:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":270,"name":"uint16","nodeType":"ElementaryTypeName","src":"2453:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2500:1:5","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"id":275,"mutability":"constant","name":"NUM_WORDS","nameLocation":"2532:9:5","nodeType":"VariableDeclaration","scope":742,"src":"2508:37:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":273,"name":"uint32","nodeType":"ElementaryTypeName","src":"2508:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"31","id":274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2544:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":false,"id":277,"mutability":"mutable","name":"raffleOwner","nameLocation":"2599:11:5","nodeType":"VariableDeclaration","scope":742,"src":"2583:27:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":276,"name":"address","nodeType":"ElementaryTypeName","src":"2583:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":279,"mutability":"immutable","name":"i_entranceFee","nameLocation":"2671:13:5","nodeType":"VariableDeclaration","scope":742,"src":"2645:39:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":278,"name":"uint256","nodeType":"ElementaryTypeName","src":"2645:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":282,"mutability":"mutable","name":"s_players","nameLocation":"2748:9:5","nodeType":"VariableDeclaration","scope":742,"src":"2722:35:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[]"},"typeName":{"baseType":{"id":280,"name":"address","nodeType":"ElementaryTypeName","src":"2722:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":281,"nodeType":"ArrayTypeName","src":"2722:17:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"private"},{"constant":false,"id":284,"mutability":"mutable","name":"s_recentWinner","nameLocation":"2833:14:5","nodeType":"VariableDeclaration","scope":742,"src":"2817:30:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":283,"name":"address","nodeType":"ElementaryTypeName","src":"2817:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":287,"mutability":"mutable","name":"s_raffleState","nameLocation":"2874:13:5","nodeType":"VariableDeclaration","scope":742,"src":"2854:33:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"},"typeName":{"id":286,"nodeType":"UserDefinedTypeName","pathNode":{"id":285,"name":"RaffleState","nodeType":"IdentifierPath","referencedDeclaration":260,"src":"2854:11:5"},"referencedDeclaration":260,"src":"2854:11:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"visibility":"private"},{"constant":false,"id":289,"mutability":"mutable","name":"s_lastTimeStamp","nameLocation":"2910:15:5","nodeType":"VariableDeclaration","scope":742,"src":"2894:31:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":288,"name":"uint256","nodeType":"ElementaryTypeName","src":"2894:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":291,"mutability":"mutable","name":"interval","nameLocation":"2948:8:5","nodeType":"VariableDeclaration","scope":742,"src":"2932:24:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":290,"name":"uint256","nodeType":"ElementaryTypeName","src":"2932:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"anonymous":false,"id":295,"name":"RaffleEnter","nameLocation":"2989:11:5","nodeType":"EventDefinition","parameters":{"id":294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":293,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"3017:6:5","nodeType":"VariableDeclaration","scope":295,"src":"3001:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":292,"name":"address","nodeType":"ElementaryTypeName","src":"3001:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3000:24:5"},"src":"2983:42:5"},{"anonymous":false,"id":299,"name":"RequestedRaffleWinner","nameLocation":"3037:21:5","nodeType":"EventDefinition","parameters":{"id":298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":297,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"3075:9:5","nodeType":"VariableDeclaration","scope":299,"src":"3059:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":296,"name":"uint256","nodeType":"ElementaryTypeName","src":"3059:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3058:27:5"},"src":"3031:55:5"},{"anonymous":false,"id":303,"name":"WinnerPicked","nameLocation":"3098:12:5","nodeType":"EventDefinition","parameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"indexed":true,"mutability":"mutable","name":"winner","nameLocation":"3127:6:5","nodeType":"VariableDeclaration","scope":303,"src":"3111:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":300,"name":"address","nodeType":"ElementaryTypeName","src":"3111:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3110:24:5"},"src":"3092:43:5"},{"body":{"id":362,"nodeType":"Block","src":"3709:465:5","statements":[{"expression":{"id":323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":321,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"3720:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":322,"name":"entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"3736:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3720:27:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":324,"nodeType":"ExpressionStatement","src":"3720:27:5"},{"expression":{"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":325,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"3758:16:5","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":327,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"3803:16:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":326,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"3777:25:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$176_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3777:43:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"src":"3758:62:5","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"id":330,"nodeType":"ExpressionStatement","src":"3758:62:5"},{"expression":{"id":333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":331,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"3902:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":332,"name":"gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"3914:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3902:19:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":334,"nodeType":"ExpressionStatement","src":"3902:19:5"},{"expression":{"id":337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":335,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"3932:16:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":336,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"3951:14:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"3932:33:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":338,"nodeType":"ExpressionStatement","src":"3932:33:5"},{"expression":{"id":341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":339,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"3976:18:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":340,"name":"callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"3997:16:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"3976:37:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":342,"nodeType":"ExpressionStatement","src":"3976:37:5"},{"expression":{"id":346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":343,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"4024:13:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":344,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"4040:11:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$260_$","typeString":"type(enum Raffle.RaffleState)"}},"id":345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":258,"src":"4040:16:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"src":"4024:32:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"id":347,"nodeType":"ExpressionStatement","src":"4024:32:5"},{"expression":{"id":351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":348,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"4067:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":349,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4085:5:5","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"4085:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4067:33:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":352,"nodeType":"ExpressionStatement","src":"4067:33:5"},{"expression":{"id":355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":353,"name":"interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"4111:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":354,"name":"_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"4122:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4111:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":356,"nodeType":"ExpressionStatement","src":"4111:20:5"},{"expression":{"id":360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":357,"name":"raffleOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"4142:11:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":358,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4156:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4156:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4142:24:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":361,"nodeType":"ExpressionStatement","src":"4142:24:5"}]},"id":363,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":318,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"3691:16:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":319,"kind":"baseConstructorSpecifier","modifierName":{"id":317,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"3673:17:5"},"nodeType":"ModifierInvocation","src":"3673:35:5"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":305,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"3499:16:5","nodeType":"VariableDeclaration","scope":363,"src":"3491:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":304,"name":"address","nodeType":"ElementaryTypeName","src":"3491:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":307,"mutability":"mutable","name":"entranceFee","nameLocation":"3534:11:5","nodeType":"VariableDeclaration","scope":363,"src":"3526:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":306,"name":"uint256","nodeType":"ElementaryTypeName","src":"3526:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":309,"mutability":"mutable","name":"gasLane","nameLocation":"3564:7:5","nodeType":"VariableDeclaration","scope":363,"src":"3556:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3556:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":311,"mutability":"mutable","name":"subscriptionId","nameLocation":"3589:14:5","nodeType":"VariableDeclaration","scope":363,"src":"3582:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":310,"name":"uint64","nodeType":"ElementaryTypeName","src":"3582:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":313,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"3621:16:5","nodeType":"VariableDeclaration","scope":363,"src":"3614:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":312,"name":"uint32","nodeType":"ElementaryTypeName","src":"3614:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":315,"mutability":"mutable","name":"_interval","nameLocation":"3656:9:5","nodeType":"VariableDeclaration","scope":363,"src":"3648:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":314,"name":"uint256","nodeType":"ElementaryTypeName","src":"3648:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3480:192:5"},"returnParameters":{"id":320,"nodeType":"ParameterList","parameters":[],"src":"3709:0:5"},"scope":742,"src":"3469:705:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":389,"nodeType":"Block","src":"4215:164:5","statements":[{"body":{"id":386,"nodeType":"Block","src":"4270:90:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":376,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"4289:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":378,"indexExpression":{"id":377,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"4299:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4289:12:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":379,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4305:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4305:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4289:26:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":385,"nodeType":"IfStatement","src":"4285:63:5","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":382,"name":"Raffle__AlreadyEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"4324:22:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4324:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":384,"nodeType":"RevertStatement","src":"4317:31:5"}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":369,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"4243:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":370,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"4247:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4247:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4243:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":387,"initializationExpression":{"assignments":[366],"declarations":[{"constant":false,"id":366,"mutability":"mutable","name":"i","nameLocation":"4236:1:5","nodeType":"VariableDeclaration","scope":387,"src":"4231:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":365,"name":"uint","nodeType":"ElementaryTypeName","src":"4231:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":368,"initialValue":{"hexValue":"30","id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4240:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4231:10:5"},"loopExpression":{"expression":{"id":374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4265:3:5","subExpression":{"id":373,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"4265:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":375,"nodeType":"ExpressionStatement","src":"4265:3:5"},"nodeType":"ForStatement","src":"4226:134:5"},{"id":388,"nodeType":"PlaceholderStatement","src":"4370:1:5"}]},"id":390,"name":"checkIfAlreadyEntered","nameLocation":"4191:21:5","nodeType":"ModifierDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[],"src":"4212:2:5"},"src":"4182:197:5","virtual":false,"visibility":"internal"},{"body":{"id":401,"nodeType":"Block","src":"4421:94:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"},"id":395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":392,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"4436:13:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":393,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"4453:11:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$260_$","typeString":"type(enum Raffle.RaffleState)"}},"id":394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":258,"src":"4453:16:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"src":"4436:33:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":399,"nodeType":"IfStatement","src":"4432:63:5","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":396,"name":"Raffle__NotOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"4478:15:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4478:17:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":398,"nodeType":"RevertStatement","src":"4471:24:5"}},{"id":400,"nodeType":"PlaceholderStatement","src":"4506:1:5"}]},"id":402,"name":"checkIfRaffleStateOpen","nameLocation":"4396:22:5","nodeType":"ModifierDefinition","parameters":{"id":391,"nodeType":"ParameterList","parameters":[],"src":"4418:2:5"},"src":"4387:128:5","virtual":false,"visibility":"internal"},{"body":{"id":413,"nodeType":"Block","src":"4558:98:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":404,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4573:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"4573:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":406,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"4585:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4573:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":411,"nodeType":"IfStatement","src":"4569:67:5","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":408,"name":"Raffle__NotEnoughETHEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"4607:27:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4607:29:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":410,"nodeType":"RevertStatement","src":"4600:36:5"}},{"id":412,"nodeType":"PlaceholderStatement","src":"4647:1:5"}]},"id":414,"name":"checkIfEnoughEthEntered","nameLocation":"4532:23:5","nodeType":"ModifierDefinition","parameters":{"id":403,"nodeType":"ParameterList","parameters":[],"src":"4555:2:5"},"src":"4523:133:5","virtual":false,"visibility":"internal"},{"body":{"id":438,"nodeType":"Block","src":"4821:284:5","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":428,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4921:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4921:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4913:8:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":426,"name":"address","nodeType":"ElementaryTypeName","src":"4913:8:5","stateMutability":"payable","typeDescriptions":{}}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4913:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":423,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"4898:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"4898:14:5","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$bound_to$_t_array$_t_address_payable_$dyn_storage_ptr_$","typeString":"function (address payable[] storage pointer,address payable)"}},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4898:35:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":432,"nodeType":"ExpressionStatement","src":"4898:35:5"},{"eventCall":{"arguments":[{"expression":{"id":434,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5086:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"5086:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":433,"name":"RaffleEnter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"5074:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5074:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":437,"nodeType":"EmitStatement","src":"5069:28:5"}]},"functionSelector":"2cfcc539","id":439,"implemented":true,"kind":"function","modifiers":[{"id":417,"kind":"modifierInvocation","modifierName":{"id":416,"name":"checkIfRaffleStateOpen","nodeType":"IdentifierPath","referencedDeclaration":402,"src":"4729:22:5"},"nodeType":"ModifierInvocation","src":"4729:22:5"},{"id":419,"kind":"modifierInvocation","modifierName":{"id":418,"name":"checkIfAlreadyEntered","nodeType":"IdentifierPath","referencedDeclaration":390,"src":"4761:21:5"},"nodeType":"ModifierInvocation","src":"4761:21:5"},{"id":421,"kind":"modifierInvocation","modifierName":{"id":420,"name":"checkIfEnoughEthEntered","nodeType":"IdentifierPath","referencedDeclaration":414,"src":"4792:23:5"},"nodeType":"ModifierInvocation","src":"4792:23:5"}],"name":"enterRaffle","nameLocation":"4673:11:5","nodeType":"FunctionDefinition","parameters":{"id":415,"nodeType":"ParameterList","parameters":[],"src":"4684:2:5"},"returnParameters":{"id":422,"nodeType":"ParameterList","parameters":[],"src":"4821:0:5"},"scope":742,"src":"4664:441:5","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[69],"body":{"id":502,"nodeType":"Block","src":"6565:724:5","statements":[{"assignments":[451],"declarations":[{"constant":false,"id":451,"mutability":"mutable","name":"isOpen","nameLocation":"6581:6:5","nodeType":"VariableDeclaration","scope":502,"src":"6576:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":450,"name":"bool","nodeType":"ElementaryTypeName","src":"6576:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":457,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":452,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"6591:11:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$260_$","typeString":"type(enum Raffle.RaffleState)"}},"id":453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":258,"src":"6591:16:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":454,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"6611:13:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"src":"6591:33:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":456,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6590:35:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"6576:49:5"},{"assignments":[459],"declarations":[{"constant":false,"id":459,"mutability":"mutable","name":"timePassed","nameLocation":"6641:10:5","nodeType":"VariableDeclaration","scope":502,"src":"6636:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":458,"name":"bool","nodeType":"ElementaryTypeName","src":"6636:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":468,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":460,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6656:5:5","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"6656:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":462,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"6674:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6656:33:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":464,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6655:35:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":465,"name":"interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"6693:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6655:46:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":467,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6654:48:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"6636:66:5"},{"assignments":[470],"declarations":[{"constant":false,"id":470,"mutability":"mutable","name":"hasPlayers","nameLocation":"6718:10:5","nodeType":"VariableDeclaration","scope":502,"src":"6713:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":469,"name":"bool","nodeType":"ElementaryTypeName","src":"6713:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":476,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":471,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"6732:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6732:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6751:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6732:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":475,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6731:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"6713:40:5"},{"assignments":[478],"declarations":[{"constant":false,"id":478,"mutability":"mutable","name":"hasBalance","nameLocation":"6769:10:5","nodeType":"VariableDeclaration","scope":502,"src":"6764:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":477,"name":"bool","nodeType":"ElementaryTypeName","src":"6764:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":486,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":481,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6790:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Raffle_$742","typeString":"contract Raffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Raffle_$742","typeString":"contract Raffle"}],"id":480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6782:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":479,"name":"address","nodeType":"ElementaryTypeName","src":"6782:7:5","typeDescriptions":{}}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6782:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"6782:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6806:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6782:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"6764:43:5"},{"expression":{"id":496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":487,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"6818:12:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":488,"name":"isOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"6834:6:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":489,"name":"timePassed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"6844:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6834:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":491,"name":"hasPlayers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":470,"src":"6858:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6834:34:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":493,"name":"hasBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"6872:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6834:48:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":495,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6833:50:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6818:65:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":497,"nodeType":"ExpressionStatement","src":"6818:65:5"},{"expression":{"components":[{"id":498,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"6902:12:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"","id":499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6916:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"id":500,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6901:18:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_$","typeString":"tuple(bool,literal_string \"\")"}},"functionReturnParameters":449,"id":501,"nodeType":"Return","src":"6894:25:5"}]},"documentation":{"id":440,"nodeType":"StructuredDocumentation","src":"5113:929:5","text":" @dev This is the function that the Chainlink Keeper nodes call\n they look for the `upkeepNeeded` to return true.\n The following should be true in order to return true.\n 1. Our time interval should have passed\n 2. The lottery should have at least 1 player, and have some ETH\n 3. Our subscription is funded with LINK\n 4. The lottery should be in an \"open\" state.\n Smg that we want to avoid when we are waiting for a random number to return and when we have requested a random winner, we are technically\n in this weird limbo state where we are waiting for a random number to be returned, and we really shouldn't allow any new players to join.\n So we need to create a state variable telling us whether the lottery is open or not, and while we are waiting for a random number to\n get back, we will be in a closed or a calculated state."},"functionSelector":"6e04ff0d","id":503,"implemented":true,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"6426:11:5","nodeType":"FunctionDefinition","overrides":{"id":444,"nodeType":"OverrideSpecifier","overrides":[],"src":"6496:8:5"},"parameters":{"id":443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":503,"src":"6448:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":441,"name":"bytes","nodeType":"ElementaryTypeName","src":"6448:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6437:46:5"},"returnParameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"6519:12:5","nodeType":"VariableDeclaration","scope":503,"src":"6514:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":445,"name":"bool","nodeType":"ElementaryTypeName","src":"6514:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":448,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":503,"src":"6533:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":447,"name":"bytes","nodeType":"ElementaryTypeName","src":"6533:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6513:51:5"},"scope":742,"src":"6417:872:5","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[75],"body":{"id":553,"nodeType":"Block","src":"7847:1972:5","statements":[{"assignments":[510,null],"declarations":[{"constant":false,"id":510,"mutability":"mutable","name":"upKeepNeeded","nameLocation":"8846:12:5","nodeType":"VariableDeclaration","scope":553,"src":"8841:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":509,"name":"bool","nodeType":"ElementaryTypeName","src":"8841:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":514,"initialValue":{"arguments":[{"hexValue":"","id":512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8876:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":511,"name":"checkUpkeep","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"8864:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8864:15:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"8840:39:5"},{"condition":{"id":516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8894:13:5","subExpression":{"id":515,"name":"upKeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"8895:12:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":532,"nodeType":"IfStatement","src":"8890:315:5","trueBody":{"id":531,"nodeType":"Block","src":"8909:296:5","statements":[{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":520,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8981:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Raffle_$742","typeString":"contract Raffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Raffle_$742","typeString":"contract Raffle"}],"id":519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8973:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":518,"name":"address","nodeType":"ElementaryTypeName","src":"8973:7:5","typeDescriptions":{}}},"id":521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8973:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"8973:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":523,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"9013:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"9013:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":527,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"9056:13:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}],"id":526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9048:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":525,"name":"uint256","nodeType":"ElementaryTypeName","src":"9048:7:5","typeDescriptions":{}}},"id":528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9048:22:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":517,"name":"Raffle__UpKeepNotNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"8931:23:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256) pure"}},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8931:154:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":530,"nodeType":"RevertStatement","src":"8924:161:5"}]}},{"expression":{"id":536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":533,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"9217:13:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":534,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"9233:11:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$260_$","typeString":"type(enum Raffle.RaffleState)"}},"id":535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"CALCULATING","nodeType":"MemberAccess","referencedDeclaration":259,"src":"9233:23:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"src":"9217:39:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"id":537,"nodeType":"ExpressionStatement","src":"9217:39:5"},{"assignments":[539],"declarations":[{"constant":false,"id":539,"mutability":"mutable","name":"requestId","nameLocation":"9422:9:5","nodeType":"VariableDeclaration","scope":553,"src":"9414:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":538,"name":"uint256","nodeType":"ElementaryTypeName","src":"9414:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":548,"initialValue":{"arguments":[{"id":542,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"9484:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":543,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"9529:16:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":544,"name":"REQUEST_CONFIRMATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"9560:20:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":545,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"9595:18:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":546,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"9628:9:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":540,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"9434:16:5","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":109,"src":"9434:35:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9434:214:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9414:234:5"},{"eventCall":{"arguments":[{"id":550,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"9801:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":549,"name":"RequestedRaffleWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"9779:21:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9779:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":552,"nodeType":"EmitStatement","src":"9774:37:5"}]},"functionSelector":"4585e33b","id":554,"implemented":true,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"7718:13:5","nodeType":"FunctionDefinition","overrides":{"id":507,"nodeType":"OverrideSpecifier","overrides":[],"src":"7838:8:5"},"parameters":{"id":506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":505,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":554,"src":"7742:14:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":504,"name":"bytes","nodeType":"ElementaryTypeName","src":"7742:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7731:97:5"},"returnParameters":{"id":508,"nodeType":"ParameterList","parameters":[],"src":"7847:0:5"},"scope":742,"src":"7709:2110:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[30],"body":{"id":624,"nodeType":"Block","src":"10459:805:5","statements":[{"assignments":[564],"declarations":[{"constant":false,"id":564,"mutability":"mutable","name":"indexOfWinner","nameLocation":"10629:13:5","nodeType":"VariableDeclaration","scope":624,"src":"10621:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":563,"name":"uint256","nodeType":"ElementaryTypeName","src":"10621:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":571,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":565,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"10645:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":567,"indexExpression":{"hexValue":"30","id":566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10657:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10645:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"expression":{"id":568,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"10662:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"10662:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10645:33:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10621:57:5"},{"assignments":[573],"declarations":[{"constant":false,"id":573,"mutability":"mutable","name":"recentWinner","nameLocation":"10705:12:5","nodeType":"VariableDeclaration","scope":624,"src":"10689:28:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":572,"name":"address","nodeType":"ElementaryTypeName","src":"10689:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":577,"initialValue":{"baseExpression":{"id":574,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"10720:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":576,"indexExpression":{"id":575,"name":"indexOfWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"10730:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10720:24:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"10689:55:5"},{"expression":{"id":580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":578,"name":"s_recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"10755:14:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":579,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"10772:12:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"10755:29:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":581,"nodeType":"ExpressionStatement","src":"10755:29:5"},{"expression":{"id":585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":582,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"10795:13:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":583,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"10811:11:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$260_$","typeString":"type(enum Raffle.RaffleState)"}},"id":584,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":258,"src":"10811:16:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"src":"10795:32:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"id":586,"nodeType":"ExpressionStatement","src":"10795:32:5"},{"expression":{"id":593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":587,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"10863:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10897:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"10875:21:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_payable_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address payable[] memory)"},"typeName":{"baseType":{"id":588,"name":"address","nodeType":"ElementaryTypeName","src":"10879:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":589,"nodeType":"ArrayTypeName","src":"10879:17:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}}},"id":592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10875:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_memory_ptr","typeString":"address payable[] memory"}},"src":"10863:36:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":594,"nodeType":"ExpressionStatement","src":"10863:36:5"},{"expression":{"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":595,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"10942:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":596,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10960:5:5","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"10960:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10942:33:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":599,"nodeType":"ExpressionStatement","src":"10942:33:5"},{"assignments":[601,null],"declarations":[{"constant":false,"id":601,"mutability":"mutable","name":"success","nameLocation":"10994:7:5","nodeType":"VariableDeclaration","scope":624,"src":"10989:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":600,"name":"bool","nodeType":"ElementaryTypeName","src":"10989:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":612,"initialValue":{"arguments":[{"hexValue":"","id":610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11055:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":602,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"11007:12:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"11007:17:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":606,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"11040:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Raffle_$742","typeString":"contract Raffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Raffle_$742","typeString":"contract Raffle"}],"id":605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11032:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":604,"name":"address","nodeType":"ElementaryTypeName","src":"11032:7:5","typeDescriptions":{}}},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11032:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"11032:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"11007:47:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11007:51:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"10988:70:5"},{"condition":{"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"11147:8:5","subExpression":{"id":613,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"11148:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":619,"nodeType":"IfStatement","src":"11143:72:5","trueBody":{"id":618,"nodeType":"Block","src":"11157:58:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":615,"name":"Raffle__TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"11179:22:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11179:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":617,"nodeType":"RevertStatement","src":"11172:31:5"}]}},{"eventCall":{"arguments":[{"id":621,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"11243:12:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":620,"name":"WinnerPicked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"11230:12:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11230:26:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":623,"nodeType":"EmitStatement","src":"11225:31:5"}]},"id":625,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"10229:18:5","nodeType":"FunctionDefinition","overrides":{"id":561,"nodeType":"OverrideSpecifier","overrides":[],"src":"10450:8:5"},"parameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":556,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":625,"src":"10258:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":555,"name":"uint256","nodeType":"ElementaryTypeName","src":"10258:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":559,"mutability":"mutable","name":"randomWords","nameLocation":"10422:11:5","nodeType":"VariableDeclaration","scope":625,"src":"10405:28:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":557,"name":"uint256","nodeType":"ElementaryTypeName","src":"10405:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":558,"nodeType":"ArrayTypeName","src":"10405:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10247:193:5"},"returnParameters":{"id":562,"nodeType":"ParameterList","parameters":[],"src":"10459:0:5"},"scope":742,"src":"10220:1044:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":632,"nodeType":"Block","src":"11328:39:5","statements":[{"expression":{"id":630,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"11346:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":629,"id":631,"nodeType":"Return","src":"11339:20:5"}]},"functionSelector":"09bc33a7","id":633,"implemented":true,"kind":"function","modifiers":[],"name":"getEntranceFee","nameLocation":"11281:14:5","nodeType":"FunctionDefinition","parameters":{"id":626,"nodeType":"ParameterList","parameters":[],"src":"11295:2:5"},"returnParameters":{"id":629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":633,"src":"11319:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":627,"name":"uint256","nodeType":"ElementaryTypeName","src":"11319:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11318:9:5"},"scope":742,"src":"11272:95:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":644,"nodeType":"Block","src":"11439:42:5","statements":[{"expression":{"baseExpression":{"id":640,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"11457:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":642,"indexExpression":{"id":641,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"11467:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11457:16:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":639,"id":643,"nodeType":"Return","src":"11450:23:5"}]},"functionSelector":"e55ae4e8","id":645,"implemented":true,"kind":"function","modifiers":[],"name":"getPlayer","nameLocation":"11384:9:5","nodeType":"FunctionDefinition","parameters":{"id":636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":635,"mutability":"mutable","name":"index","nameLocation":"11402:5:5","nodeType":"VariableDeclaration","scope":645,"src":"11394:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":634,"name":"uint256","nodeType":"ElementaryTypeName","src":"11394:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11393:15:5"},"returnParameters":{"id":639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":638,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":645,"src":"11430:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":637,"name":"address","nodeType":"ElementaryTypeName","src":"11430:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11429:9:5"},"scope":742,"src":"11375:106:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":652,"nodeType":"Block","src":"11546:40:5","statements":[{"expression":{"id":650,"name":"s_recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"11564:14:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":649,"id":651,"nodeType":"Return","src":"11557:21:5"}]},"functionSelector":"473f1ddc","id":653,"implemented":true,"kind":"function","modifiers":[],"name":"getRecentWinner","nameLocation":"11498:15:5","nodeType":"FunctionDefinition","parameters":{"id":646,"nodeType":"ParameterList","parameters":[],"src":"11513:2:5"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":653,"src":"11537:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":647,"name":"address","nodeType":"ElementaryTypeName","src":"11537:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11536:9:5"},"scope":742,"src":"11489:97:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":661,"nodeType":"Block","src":"11654:39:5","statements":[{"expression":{"id":659,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"11672:13:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"functionReturnParameters":658,"id":660,"nodeType":"Return","src":"11665:20:5"}]},"functionSelector":"115cbaf5","id":662,"implemented":true,"kind":"function","modifiers":[],"name":"getRaffleState","nameLocation":"11603:14:5","nodeType":"FunctionDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[],"src":"11617:2:5"},"returnParameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":657,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":662,"src":"11641:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"},"typeName":{"id":656,"nodeType":"UserDefinedTypeName","pathNode":{"id":655,"name":"RaffleState","nodeType":"IdentifierPath","referencedDeclaration":260,"src":"11641:11:5"},"referencedDeclaration":260,"src":"11641:11:5","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$260","typeString":"enum Raffle.RaffleState"}},"visibility":"internal"}],"src":"11640:13:5"},"scope":742,"src":"11594:99:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":669,"nodeType":"Block","src":"11754:67:5","statements":[{"expression":{"id":667,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"11772:9:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":666,"id":668,"nodeType":"Return","src":"11765:16:5"}]},"functionSelector":"53a2c19a","id":670,"implemented":true,"kind":"function","modifiers":[],"name":"getNumWords","nameLocation":"11710:11:5","nodeType":"FunctionDefinition","parameters":{"id":663,"nodeType":"ParameterList","parameters":[],"src":"11721:2:5"},"returnParameters":{"id":666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":670,"src":"11745:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":664,"name":"uint256","nodeType":"ElementaryTypeName","src":"11745:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11744:9:5"},"scope":742,"src":"11701:120:5","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":678,"nodeType":"Block","src":"11889:42:5","statements":[{"expression":{"expression":{"id":675,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"11907:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"11907:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":674,"id":677,"nodeType":"Return","src":"11900:23:5"}]},"functionSelector":"fd6673f5","id":679,"implemented":true,"kind":"function","modifiers":[],"name":"getNumberOfPlayers","nameLocation":"11838:18:5","nodeType":"FunctionDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[],"src":"11856:2:5"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":673,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":679,"src":"11880:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":672,"name":"uint256","nodeType":"ElementaryTypeName","src":"11880:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11879:9:5"},"scope":742,"src":"11829:102:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":686,"nodeType":"Block","src":"11992:34:5","statements":[{"expression":{"id":684,"name":"interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"12010:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":683,"id":685,"nodeType":"Return","src":"12003:15:5"}]},"functionSelector":"91ad27b4","id":687,"implemented":true,"kind":"function","modifiers":[],"name":"getInterval","nameLocation":"11948:11:5","nodeType":"FunctionDefinition","parameters":{"id":680,"nodeType":"ParameterList","parameters":[],"src":"11959:2:5"},"returnParameters":{"id":683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":687,"src":"11983:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":681,"name":"uint256","nodeType":"ElementaryTypeName","src":"11983:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11982:9:5"},"scope":742,"src":"11939:87:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":704,"nodeType":"Block","src":"12081:128:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":693,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12100:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"12100:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":695,"name":"raffleOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"12114:11:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12100:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c7920726166666c654f776e65722063616e206368616e67652074686520696e74657276616c","id":697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12127:42:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b","typeString":"literal_string \"Only raffleOwner can change the interval\""},"value":"Only raffleOwner can change the interval"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b","typeString":"literal_string \"Only raffleOwner can change the interval\""}],"id":692,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12092:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12092:78:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":699,"nodeType":"ExpressionStatement","src":"12092:78:5"},{"expression":{"id":702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":700,"name":"interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"12181:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":701,"name":"_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"12192:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12181:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":703,"nodeType":"ExpressionStatement","src":"12181:20:5"}]},"functionSelector":"d0f07926","id":705,"implemented":true,"kind":"function","modifiers":[],"name":"updateInterval","nameLocation":"12043:14:5","nodeType":"FunctionDefinition","parameters":{"id":690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":689,"mutability":"mutable","name":"_interval","nameLocation":"12063:9:5","nodeType":"VariableDeclaration","scope":705,"src":"12058:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":688,"name":"uint","nodeType":"ElementaryTypeName","src":"12058:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12057:16:5"},"returnParameters":{"id":691,"nodeType":"ParameterList","parameters":[],"src":"12081:0:5"},"scope":742,"src":"12034:175:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":712,"nodeType":"Block","src":"12277:41:5","statements":[{"expression":{"id":710,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"12295:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":709,"id":711,"nodeType":"Return","src":"12288:22:5"}]},"functionSelector":"320229eb","id":713,"implemented":true,"kind":"function","modifiers":[],"name":"getLatestTimeStamp","nameLocation":"12226:18:5","nodeType":"FunctionDefinition","parameters":{"id":706,"nodeType":"ParameterList","parameters":[],"src":"12244:2:5"},"returnParameters":{"id":709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":708,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":713,"src":"12268:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":707,"name":"uint256","nodeType":"ElementaryTypeName","src":"12268:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12267:9:5"},"scope":742,"src":"12217:101:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":720,"nodeType":"Block","src":"12391:46:5","statements":[{"expression":{"id":718,"name":"REQUEST_CONFIRMATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"12409:20:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":717,"id":719,"nodeType":"Return","src":"12402:27:5"}]},"functionSelector":"5f1b0fd8","id":721,"implemented":true,"kind":"function","modifiers":[],"name":"getRequestConfirmations","nameLocation":"12335:23:5","nodeType":"FunctionDefinition","parameters":{"id":714,"nodeType":"ParameterList","parameters":[],"src":"12358:2:5"},"returnParameters":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":716,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":721,"src":"12382:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":715,"name":"uint256","nodeType":"ElementaryTypeName","src":"12382:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12381:9:5"},"scope":742,"src":"12326:111:5","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":732,"nodeType":"Block","src":"12502:47:5","statements":[{"expression":{"expression":{"arguments":[{"id":728,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12528:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Raffle_$742","typeString":"contract Raffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Raffle_$742","typeString":"contract Raffle"}],"id":727,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12520:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":726,"name":"address","nodeType":"ElementaryTypeName","src":"12520:7:5","typeDescriptions":{}}},"id":729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12520:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"12520:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":725,"id":731,"nodeType":"Return","src":"12513:28:5"}]},"functionSelector":"173e4241","id":733,"implemented":true,"kind":"function","modifiers":[],"name":"moneyInContract","nameLocation":"12454:15:5","nodeType":"FunctionDefinition","parameters":{"id":722,"nodeType":"ParameterList","parameters":[],"src":"12469:2:5"},"returnParameters":{"id":725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":733,"src":"12493:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":723,"name":"uint256","nodeType":"ElementaryTypeName","src":"12493:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12492:9:5"},"scope":742,"src":"12445:104:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":740,"nodeType":"Block","src":"12613:37:5","statements":[{"expression":{"id":738,"name":"raffleOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"12631:11:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":737,"id":739,"nodeType":"Return","src":"12624:18:5"}]},"functionSelector":"19a6ac84","id":741,"implemented":true,"kind":"function","modifiers":[],"name":"getRaffleOwner","nameLocation":"12566:14:5","nodeType":"FunctionDefinition","parameters":{"id":734,"nodeType":"ParameterList","parameters":[],"src":"12580:2:5"},"returnParameters":{"id":737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":736,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":741,"src":"12604:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":735,"name":"address","nodeType":"ElementaryTypeName","src":"12604:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12603:9:5"},"scope":742,"src":"12557:93:5","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":743,"src":"1713:10940:5","usedErrors":[8,238,240,242,250,252]}],"src":"285:12370:5"},"id":5}},"contracts":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"AutomationCompatibleInterface":{"abi":[{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":\"AutomationCompatibleInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":187,"contract":"@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Raffle.sol":{"Raffle":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"uint256","name":"entranceFee","type":"uint256"},{"internalType":"bytes32","name":"gasLane","type":"bytes32"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint256","name":"_interval","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"Raffle__AlreadyEntered","type":"error"},{"inputs":[],"name":"Raffle__NotEnoughETHEntered","type":"error"},{"inputs":[],"name":"Raffle__NotOpen","type":"error"},{"inputs":[],"name":"Raffle__TransferFailed","type":"error"},{"inputs":[{"internalType":"uint256","name":"currentBalance","type":"uint256"},{"internalType":"uint256","name":"numPlayers","type":"uint256"},{"internalType":"uint256","name":"raffleState","type":"uint256"}],"name":"Raffle__UpKeepNotNeeded","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"}],"name":"RaffleEnter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"}],"name":"RequestedRaffleWinner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"winner","type":"address"}],"name":"WinnerPicked","type":"event"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"enterRaffle","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getEntranceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getInterval","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLatestTimeStamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNumWords","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getNumberOfPlayers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getPlayer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRaffleOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRaffleState","outputs":[{"internalType":"enum Raffle.RaffleState","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRecentWinner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRequestConfirmations","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"moneyInContract","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_interval","type":"uint256"}],"name":"updateInterval","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Mert Kaya","details":"This implements Chainlink VRF v2 and Chainlink Keepers","kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"This is the function that the Chainlink Keeper nodes call they look for the `upkeepNeeded` to return true. The following should be true in order to return true. 1. Our time interval should have passed 2. The lottery should have at least 1 player, and have some ETH 3. Our subscription is funded with LINK 4. The lottery should be in an \"open\" state. Smg that we want to avoid when we are waiting for a random number to return and when we have requested a random winner, we are technically in this weird limbo state where we are waiting for a random number to be returned, and we really shouldn't allow any new players to join. So we need to create a state variable telling us whether the lottery is open or not, and while we are waiting for a random number to get back, we will be in a closed or a calculated state."}},"title":"A sample Raffle Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_21":{"entryPoint":null,"id":21,"parameterSlots":1,"returnSlots":0},"@_363":{"entryPoint":null,"id":363,"parameterSlots":6,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":459,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":577,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":518,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32_fromMemory":{"entryPoint":711,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64_fromMemory":{"entryPoint":646,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory":{"entryPoint":734,"id":null,"parameterSlots":2,"returnSlots":6},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":413,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":541,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":381,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":482,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":669,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":600,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x21":{"entryPoint":890,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":376,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":433,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":551,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":492,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":685,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":620,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3636:6","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:6","statements":[{"nodeType":"YulAssignment","src":"57:19:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:6","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:6"},"nodeType":"YulFunctionCall","src":"67:9:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:6"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:6","type":""}],"src":"7:75:6"},{"body":{"nodeType":"YulBlock","src":"177:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:6"},"nodeType":"YulFunctionCall","src":"187:12:6"},"nodeType":"YulExpressionStatement","src":"187:12:6"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:6"},{"body":{"nodeType":"YulBlock","src":"300:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:6"},"nodeType":"YulFunctionCall","src":"310:12:6"},"nodeType":"YulExpressionStatement","src":"310:12:6"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:6"},{"body":{"nodeType":"YulBlock","src":"379:81:6","statements":[{"nodeType":"YulAssignment","src":"389:65:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:6"},"nodeType":"YulFunctionCall","src":"400:54:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:6"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:6","type":""}],"src":"334:126:6"},{"body":{"nodeType":"YulBlock","src":"511:51:6","statements":[{"nodeType":"YulAssignment","src":"521:35:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:6"},"nodeType":"YulFunctionCall","src":"532:24:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:6"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:6","type":""}],"src":"466:96:6"},{"body":{"nodeType":"YulBlock","src":"611:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:6"},"nodeType":"YulFunctionCall","src":"670:12:6"},"nodeType":"YulExpressionStatement","src":"670:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:6"},"nodeType":"YulFunctionCall","src":"641:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:6"},"nodeType":"YulFunctionCall","src":"631:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:6"},"nodeType":"YulFunctionCall","src":"624:43:6"},"nodeType":"YulIf","src":"621:63:6"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:6","type":""}],"src":"568:122:6"},{"body":{"nodeType":"YulBlock","src":"759:80:6","statements":[{"nodeType":"YulAssignment","src":"769:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:6"},"nodeType":"YulFunctionCall","src":"778:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:6"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:6"},"nodeType":"YulFunctionCall","src":"800:33:6"},"nodeType":"YulExpressionStatement","src":"800:33:6"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:6","type":""}],"src":"696:143:6"},{"body":{"nodeType":"YulBlock","src":"890:32:6","statements":[{"nodeType":"YulAssignment","src":"900:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"911:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"900:7:6"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"872:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"882:7:6","type":""}],"src":"845:77:6"},{"body":{"nodeType":"YulBlock","src":"971:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"1028:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1040:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1030:6:6"},"nodeType":"YulFunctionCall","src":"1030:12:6"},"nodeType":"YulExpressionStatement","src":"1030:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"994:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1019:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1001:17:6"},"nodeType":"YulFunctionCall","src":"1001:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"991:2:6"},"nodeType":"YulFunctionCall","src":"991:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"984:6:6"},"nodeType":"YulFunctionCall","src":"984:43:6"},"nodeType":"YulIf","src":"981:63:6"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"964:5:6","type":""}],"src":"928:122:6"},{"body":{"nodeType":"YulBlock","src":"1119:80:6","statements":[{"nodeType":"YulAssignment","src":"1129:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1144:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1138:5:6"},"nodeType":"YulFunctionCall","src":"1138:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1129:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1187:5:6"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1160:26:6"},"nodeType":"YulFunctionCall","src":"1160:33:6"},"nodeType":"YulExpressionStatement","src":"1160:33:6"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1097:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"1105:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1113:5:6","type":""}],"src":"1056:143:6"},{"body":{"nodeType":"YulBlock","src":"1250:32:6","statements":[{"nodeType":"YulAssignment","src":"1260:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"1271:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1260:7:6"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1232:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1242:7:6","type":""}],"src":"1205:77:6"},{"body":{"nodeType":"YulBlock","src":"1331:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"1388:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1397:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1400:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1390:6:6"},"nodeType":"YulFunctionCall","src":"1390:12:6"},"nodeType":"YulExpressionStatement","src":"1390:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1354:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1379:5:6"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1361:17:6"},"nodeType":"YulFunctionCall","src":"1361:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1351:2:6"},"nodeType":"YulFunctionCall","src":"1351:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1344:6:6"},"nodeType":"YulFunctionCall","src":"1344:43:6"},"nodeType":"YulIf","src":"1341:63:6"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1324:5:6","type":""}],"src":"1288:122:6"},{"body":{"nodeType":"YulBlock","src":"1479:80:6","statements":[{"nodeType":"YulAssignment","src":"1489:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1504:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1498:5:6"},"nodeType":"YulFunctionCall","src":"1498:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1489:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1547:5:6"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"1520:26:6"},"nodeType":"YulFunctionCall","src":"1520:33:6"},"nodeType":"YulExpressionStatement","src":"1520:33:6"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1457:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"1465:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1473:5:6","type":""}],"src":"1416:143:6"},{"body":{"nodeType":"YulBlock","src":"1609:57:6","statements":[{"nodeType":"YulAssignment","src":"1619:41:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1634:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"1641:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1630:3:6"},"nodeType":"YulFunctionCall","src":"1630:30:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1619:7:6"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1591:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1601:7:6","type":""}],"src":"1565:101:6"},{"body":{"nodeType":"YulBlock","src":"1714:78:6","statements":[{"body":{"nodeType":"YulBlock","src":"1770:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1779:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1782:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1772:6:6"},"nodeType":"YulFunctionCall","src":"1772:12:6"},"nodeType":"YulExpressionStatement","src":"1772:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1737:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1761:5:6"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"1744:16:6"},"nodeType":"YulFunctionCall","src":"1744:23:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1734:2:6"},"nodeType":"YulFunctionCall","src":"1734:34:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1727:6:6"},"nodeType":"YulFunctionCall","src":"1727:42:6"},"nodeType":"YulIf","src":"1724:62:6"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1707:5:6","type":""}],"src":"1672:120:6"},{"body":{"nodeType":"YulBlock","src":"1860:79:6","statements":[{"nodeType":"YulAssignment","src":"1870:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1885:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1879:5:6"},"nodeType":"YulFunctionCall","src":"1879:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1870:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1927:5:6"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"1901:25:6"},"nodeType":"YulFunctionCall","src":"1901:32:6"},"nodeType":"YulExpressionStatement","src":"1901:32:6"}]},"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1838:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"1846:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1854:5:6","type":""}],"src":"1798:141:6"},{"body":{"nodeType":"YulBlock","src":"1989:49:6","statements":[{"nodeType":"YulAssignment","src":"1999:33:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2014:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"2021:10:6","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2010:3:6"},"nodeType":"YulFunctionCall","src":"2010:22:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1999:7:6"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1971:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1981:7:6","type":""}],"src":"1945:93:6"},{"body":{"nodeType":"YulBlock","src":"2086:78:6","statements":[{"body":{"nodeType":"YulBlock","src":"2142:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2151:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2154:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2144:6:6"},"nodeType":"YulFunctionCall","src":"2144:12:6"},"nodeType":"YulExpressionStatement","src":"2144:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2109:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2133:5:6"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"2116:16:6"},"nodeType":"YulFunctionCall","src":"2116:23:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2106:2:6"},"nodeType":"YulFunctionCall","src":"2106:34:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2099:6:6"},"nodeType":"YulFunctionCall","src":"2099:42:6"},"nodeType":"YulIf","src":"2096:62:6"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2079:5:6","type":""}],"src":"2044:120:6"},{"body":{"nodeType":"YulBlock","src":"2232:79:6","statements":[{"nodeType":"YulAssignment","src":"2242:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2257:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2251:5:6"},"nodeType":"YulFunctionCall","src":"2251:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2242:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2299:5:6"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"2273:25:6"},"nodeType":"YulFunctionCall","src":"2273:32:6"},"nodeType":"YulExpressionStatement","src":"2273:32:6"}]},"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2210:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"2218:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2226:5:6","type":""}],"src":"2170:141:6"},{"body":{"nodeType":"YulBlock","src":"2477:970:6","statements":[{"body":{"nodeType":"YulBlock","src":"2524:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2526:77:6"},"nodeType":"YulFunctionCall","src":"2526:79:6"},"nodeType":"YulExpressionStatement","src":"2526:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2498:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"2507:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2494:3:6"},"nodeType":"YulFunctionCall","src":"2494:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"2519:3:6","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2490:3:6"},"nodeType":"YulFunctionCall","src":"2490:33:6"},"nodeType":"YulIf","src":"2487:120:6"},{"nodeType":"YulBlock","src":"2617:128:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2632:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"2646:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2636:6:6","type":""}]},{"nodeType":"YulAssignment","src":"2661:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2707:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"2718:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2703:3:6"},"nodeType":"YulFunctionCall","src":"2703:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2727:7:6"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"2671:31:6"},"nodeType":"YulFunctionCall","src":"2671:64:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2661:6:6"}]}]},{"nodeType":"YulBlock","src":"2755:129:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2770:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"2784:2:6","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2774:6:6","type":""}]},{"nodeType":"YulAssignment","src":"2800:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2846:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"2857:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2842:3:6"},"nodeType":"YulFunctionCall","src":"2842:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2866:7:6"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"2810:31:6"},"nodeType":"YulFunctionCall","src":"2810:64:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2800:6:6"}]}]},{"nodeType":"YulBlock","src":"2894:129:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2909:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"2923:2:6","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2913:6:6","type":""}]},{"nodeType":"YulAssignment","src":"2939:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2985:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"2996:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2981:3:6"},"nodeType":"YulFunctionCall","src":"2981:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3005:7:6"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"2949:31:6"},"nodeType":"YulFunctionCall","src":"2949:64:6"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2939:6:6"}]}]},{"nodeType":"YulBlock","src":"3033:128:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3048:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3062:2:6","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3052:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3078:73:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3123:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3134:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3119:3:6"},"nodeType":"YulFunctionCall","src":"3119:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3143:7:6"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"3088:30:6"},"nodeType":"YulFunctionCall","src":"3088:63:6"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3078:6:6"}]}]},{"nodeType":"YulBlock","src":"3171:129:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3186:17:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3200:3:6","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3190:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3217:73:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3262:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3273:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3258:3:6"},"nodeType":"YulFunctionCall","src":"3258:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3282:7:6"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"3227:30:6"},"nodeType":"YulFunctionCall","src":"3227:63:6"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"3217:6:6"}]}]},{"nodeType":"YulBlock","src":"3310:130:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3325:17:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3339:3:6","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3329:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3356:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3402:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3413:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3398:3:6"},"nodeType":"YulFunctionCall","src":"3398:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3422:7:6"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"3366:31:6"},"nodeType":"YulFunctionCall","src":"3366:64:6"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"3356:6:6"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2407:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2418:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2430:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2438:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2446:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2454:6:6","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2462:6:6","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2470:6:6","type":""}],"src":"2317:1130:6"},{"body":{"nodeType":"YulBlock","src":"3481:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3498:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3501:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3491:6:6"},"nodeType":"YulFunctionCall","src":"3491:88:6"},"nodeType":"YulExpressionStatement","src":"3491:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3595:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3598:4:6","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3588:6:6"},"nodeType":"YulFunctionCall","src":"3588:15:6"},"nodeType":"YulExpressionStatement","src":"3588:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3619:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3622:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3612:6:6"},"nodeType":"YulFunctionCall","src":"3612:15:6"},"nodeType":"YulExpressionStatement","src":"3612:15:6"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"3453:180:6"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n}\n","id":6,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101406040523480156200001257600080fd5b5060405162001b6938038062001b698339818101604052810190620000389190620002de565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508461012081815250508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508163ffffffff166101008163ffffffff1660e01b815250506000600260146101000a81548160ff021916908360018111156200011957620001186200037a565b5b02179055504260038190555080600481905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050620003a9565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001aa826200017d565b9050919050565b620001bc816200019d565b8114620001c857600080fd5b50565b600081519050620001dc81620001b1565b92915050565b6000819050919050565b620001f781620001e2565b81146200020357600080fd5b50565b6000815190506200021781620001ec565b92915050565b6000819050919050565b62000232816200021d565b81146200023e57600080fd5b50565b600081519050620002528162000227565b92915050565b600067ffffffffffffffff82169050919050565b620002778162000258565b81146200028357600080fd5b50565b60008151905062000297816200026c565b92915050565b600063ffffffff82169050919050565b620002b8816200029d565b8114620002c457600080fd5b50565b600081519050620002d881620002ad565b92915050565b60008060008060008060c08789031215620002fe57620002fd62000178565b5b60006200030e89828a01620001cb565b96505060206200032189828a0162000206565b95505060406200033489828a0162000241565b94505060606200034789828a0162000286565b93505060806200035a89828a01620002c7565b92505060a06200036d89828a0162000206565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160601c60c05160e05160c01c6101005160e01c6101205161175662000413600039600081816103aa015261060d0152600061084f0152600061082c0152600061080b015260006107cf015260008181610418015261046c01526117566000f3fe6080604052600436106100f35760003560e01c8063473f1ddc1161008a57806391ad27b41161005957806391ad27b4146102ea578063d0f0792614610315578063e55ae4e81461033e578063fd6673f51461037b576100f3565b8063473f1ddc1461022b57806353a2c19a146102565780635f1b0fd8146102815780636e04ff0d146102ac576100f3565b80631fe543e3116100c65780631fe543e3146101a45780632cfcc539146101cd578063320229eb146101d75780634585e33b14610202576100f3565b806309bc33a7146100f8578063115cbaf514610123578063173e42411461014e57806319a6ac8414610179575b600080fd5b34801561010457600080fd5b5061010d6103a6565b60405161011a9190610deb565b60405180910390f35b34801561012f57600080fd5b506101386103ce565b6040516101459190610e7d565b60405180910390f35b34801561015a57600080fd5b506101636103e5565b6040516101709190610deb565b60405180910390f35b34801561018557600080fd5b5061018e6103ed565b60405161019b9190610ed9565b60405180910390f35b3480156101b057600080fd5b506101cb60048036038101906101c6919061108d565b610416565b005b6101d56104d6565b005b3480156101e357600080fd5b506101ec61070d565b6040516101f99190610deb565b60405180910390f35b34801561020e57600080fd5b5061022960048036038101906102249190611144565b610717565b005b34801561023757600080fd5b50610240610917565b60405161024d9190610ed9565b60405180910390f35b34801561026257600080fd5b5061026b610941565b6040516102789190610deb565b60405180910390f35b34801561028d57600080fd5b50610296610950565b6040516102a39190610deb565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190611246565b61095d565b6040516102e1929190611332565b60405180910390f35b3480156102f657600080fd5b506102ff610a01565b60405161030c9190610deb565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190611362565b610a0b565b005b34801561034a57600080fd5b5061036560048036038101906103609190611362565b610aa3565b6040516103729190610ed9565b60405180910390f35b34801561038757600080fd5b50610390610aeb565b60405161039d9190610deb565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b600047905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104bf92919061138f565b60405180910390fd5b6104d28282610af8565b5050565b600060018111156104ea576104e9610e06565b5b600260149054906101000a900460ff16600181111561050c5761050b610e06565b5b14610543576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561060a573373ffffffffffffffffffffffffffffffffffffffff166001828154811061057e5761057d6113b8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156105f7576040517f1eeeae8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808061060290611416565b915050610546565b507f0000000000000000000000000000000000000000000000000000000000000000341015610665576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600354905090565b60006107316040518060200160405280600081525061095d565b509050806107a05747600180549050600260149054906101000a900460ff16600181111561076257610761610e06565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016107979392919061145f565b60405180910390fd5b6001600260146101000a81548160ff021916908360018111156107c6576107c5610e06565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161089095949392919061150e565b602060405180830381600087803b1580156108aa57600080fd5b505af11580156108be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e29190611576565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600260149054906101000a900460ff16600181111561098557610984610e06565b5b6000600181111561099957610998610e06565b5b1490506000600454600354426109af91906115a3565b119050600080600180549050119050600080471190508380156109cf5750825b80156109d85750815b80156109e15750805b955085604051806020016040528060008152509550955050505050915091565b6000600454905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a909061165a565b60405180910390fd5b8060048190555050565b600060018281548110610ab957610ab86113b8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600180549050905090565b600060018054905082600081518110610b1457610b136113b8565b5b6020026020010151610b2691906116a9565b9050600060018281548110610b3e57610b3d6113b8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff02191690836001811115610bd257610bd1610e06565b5b0217905550600067ffffffffffffffff811115610bf257610bf1610f4a565b5b604051908082528060200260200182016040528015610c205781602001602082028036833780820191505090505b5060019080519060200190610c36929190610d2b565b504260038190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610c649061170b565b60006040518083038185875af1925050503d8060008114610ca1576040519150601f19603f3d011682016040523d82523d6000602084013e610ca6565b606091505b5050905080610ce1576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610da4579160200282015b82811115610da35782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d4b565b5b509050610db19190610db5565b5090565b5b80821115610dce576000816000905550600101610db6565b5090565b6000819050919050565b610de581610dd2565b82525050565b6000602082019050610e006000830184610ddc565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610e4657610e45610e06565b5b50565b6000819050610e5782610e35565b919050565b6000610e6782610e49565b9050919050565b610e7781610e5c565b82525050565b6000602082019050610e926000830184610e6e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ec382610e98565b9050919050565b610ed381610eb8565b82525050565b6000602082019050610eee6000830184610eca565b92915050565b6000604051905090565b600080fd5b600080fd5b610f1181610dd2565b8114610f1c57600080fd5b50565b600081359050610f2e81610f08565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f8282610f39565b810181811067ffffffffffffffff82111715610fa157610fa0610f4a565b5b80604052505050565b6000610fb4610ef4565b9050610fc08282610f79565b919050565b600067ffffffffffffffff821115610fe057610fdf610f4a565b5b602082029050602081019050919050565b600080fd5b600061100961100484610fc5565b610faa565b9050808382526020820190506020840283018581111561102c5761102b610ff1565b5b835b8181101561105557806110418882610f1f565b84526020840193505060208101905061102e565b5050509392505050565b600082601f83011261107457611073610f34565b5b8135611084848260208601610ff6565b91505092915050565b600080604083850312156110a4576110a3610efe565b5b60006110b285828601610f1f565b925050602083013567ffffffffffffffff8111156110d3576110d2610f03565b5b6110df8582860161105f565b9150509250929050565b600080fd5b60008083601f84011261110457611103610f34565b5b8235905067ffffffffffffffff811115611121576111206110e9565b5b60208301915083600182028301111561113d5761113c610ff1565b5b9250929050565b6000806020838503121561115b5761115a610efe565b5b600083013567ffffffffffffffff81111561117957611178610f03565b5b611185858286016110ee565b92509250509250929050565b600080fd5b600067ffffffffffffffff8211156111b1576111b0610f4a565b5b6111ba82610f39565b9050602081019050919050565b82818337600083830152505050565b60006111e96111e484611196565b610faa565b90508281526020810184848401111561120557611204611191565b5b6112108482856111c7565b509392505050565b600082601f83011261122d5761122c610f34565b5b813561123d8482602086016111d6565b91505092915050565b60006020828403121561125c5761125b610efe565b5b600082013567ffffffffffffffff81111561127a57611279610f03565b5b61128684828501611218565b91505092915050565b60008115159050919050565b6112a48161128f565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112e45780820151818401526020810190506112c9565b838111156112f3576000848401525b50505050565b6000611304826112aa565b61130e81856112b5565b935061131e8185602086016112c6565b61132781610f39565b840191505092915050565b6000604082019050611347600083018561129b565b818103602083015261135981846112f9565b90509392505050565b60006020828403121561137857611377610efe565b5b600061138684828501610f1f565b91505092915050565b60006040820190506113a46000830185610eca565b6113b16020830184610eca565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142182610dd2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611454576114536113e7565b5b600182019050919050565b60006060820190506114746000830186610ddc565b6114816020830185610ddc565b61148e6040830184610ddc565b949350505050565b6000819050919050565b6114a981611496565b82525050565b600067ffffffffffffffff82169050919050565b6114cc816114af565b82525050565b600061ffff82169050919050565b6114e9816114d2565b82525050565b600063ffffffff82169050919050565b611508816114ef565b82525050565b600060a08201905061152360008301886114a0565b61153060208301876114c3565b61153d60408301866114e0565b61154a60608301856114ff565b61155760808301846114ff565b9695505050505050565b60008151905061157081610f08565b92915050565b60006020828403121561158c5761158b610efe565b5b600061159a84828501611561565b91505092915050565b60006115ae82610dd2565b91506115b983610dd2565b9250828210156115cc576115cb6113e7565b5b828203905092915050565b600082825260208201905092915050565b7f4f6e6c7920726166666c654f776e65722063616e206368616e6765207468652060008201527f696e74657276616c000000000000000000000000000000000000000000000000602082015250565b60006116446028836115d7565b915061164f826115e8565b604082019050919050565b6000602082019050818103600083015261167381611637565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006116b482610dd2565b91506116bf83610dd2565b9250826116cf576116ce61167a565b5b828206905092915050565b600081905092915050565b50565b60006116f56000836116da565b9150611700826116e5565b600082019050919050565b6000611716826116e8565b915081905091905056fea2646970667358221220025e1022f1eba0e0a4aa045e0be5e3a63de5ac6762c0b138ece50c9f27653fe864736f6c63430008080033","opcodes":"PUSH2 0x140 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1B69 CODESIZE SUB DUP1 PUSH3 0x1B69 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x38 SWAP2 SWAP1 PUSH3 0x2DE JUMP JUMPDEST DUP6 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP POP DUP5 PUSH2 0x120 DUP2 DUP2 MSTORE POP POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP DUP4 PUSH1 0xC0 DUP2 DUP2 MSTORE POP POP DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 SHL DUP2 MSTORE POP POP DUP2 PUSH4 0xFFFFFFFF AND PUSH2 0x100 DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH3 0x119 JUMPI PUSH3 0x118 PUSH3 0x37A JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x3 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP PUSH3 0x3A9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1AA DUP3 PUSH3 0x17D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1BC DUP2 PUSH3 0x19D JUMP JUMPDEST DUP2 EQ PUSH3 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1DC DUP2 PUSH3 0x1B1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1F7 DUP2 PUSH3 0x1E2 JUMP JUMPDEST DUP2 EQ PUSH3 0x203 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x217 DUP2 PUSH3 0x1EC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x232 DUP2 PUSH3 0x21D JUMP JUMPDEST DUP2 EQ PUSH3 0x23E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x252 DUP2 PUSH3 0x227 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x277 DUP2 PUSH3 0x258 JUMP JUMPDEST DUP2 EQ PUSH3 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x297 DUP2 PUSH3 0x26C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2B8 DUP2 PUSH3 0x29D JUMP JUMPDEST DUP2 EQ PUSH3 0x2C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x2D8 DUP2 PUSH3 0x2AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x2FE JUMPI PUSH3 0x2FD PUSH3 0x178 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x30E DUP10 DUP3 DUP11 ADD PUSH3 0x1CB JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH3 0x321 DUP10 DUP3 DUP11 ADD PUSH3 0x206 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH3 0x334 DUP10 DUP3 DUP11 ADD PUSH3 0x241 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH3 0x347 DUP10 DUP3 DUP11 ADD PUSH3 0x286 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH3 0x35A DUP10 DUP3 DUP11 ADD PUSH3 0x2C7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH3 0x36D DUP10 DUP3 DUP11 ADD PUSH3 0x206 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH1 0xC0 SHR PUSH2 0x100 MLOAD PUSH1 0xE0 SHR PUSH2 0x120 MLOAD PUSH2 0x1756 PUSH3 0x413 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x3AA ADD MSTORE PUSH2 0x60D ADD MSTORE PUSH1 0x0 PUSH2 0x84F ADD MSTORE PUSH1 0x0 PUSH2 0x82C ADD MSTORE PUSH1 0x0 PUSH2 0x80B ADD MSTORE PUSH1 0x0 PUSH2 0x7CF ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x418 ADD MSTORE PUSH2 0x46C ADD MSTORE PUSH2 0x1756 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x473F1DDC GT PUSH2 0x8A JUMPI DUP1 PUSH4 0x91AD27B4 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x91AD27B4 EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0xD0F07926 EQ PUSH2 0x315 JUMPI DUP1 PUSH4 0xE55AE4E8 EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0xFD6673F5 EQ PUSH2 0x37B JUMPI PUSH2 0xF3 JUMP JUMPDEST DUP1 PUSH4 0x473F1DDC EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x53A2C19A EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0x5F1B0FD8 EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x2AC JUMPI PUSH2 0xF3 JUMP JUMPDEST DUP1 PUSH4 0x1FE543E3 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0x320229EB EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x202 JUMPI PUSH2 0xF3 JUMP JUMPDEST DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x115CBAF5 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x173E4241 EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x19A6AC84 EQ PUSH2 0x179 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x3A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x3CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x145 SWAP2 SWAP1 PUSH2 0xE7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x170 SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19B SWAP2 SWAP1 PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C6 SWAP2 SWAP1 PUSH2 0x108D JUMP JUMPDEST PUSH2 0x416 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D5 PUSH2 0x4D6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH2 0x70D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F9 SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x229 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x224 SWAP2 SWAP1 PUSH2 0x1144 JUMP JUMPDEST PUSH2 0x717 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH2 0x917 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24D SWAP2 SWAP1 PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x941 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x278 SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x296 PUSH2 0x950 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A3 SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CE SWAP2 SWAP1 PUSH2 0x1246 JUMP JUMPDEST PUSH2 0x95D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E1 SWAP3 SWAP2 SWAP1 PUSH2 0x1332 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FF PUSH2 0xA01 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30C SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x337 SWAP2 SWAP1 PUSH2 0x1362 JUMP JUMPDEST PUSH2 0xA0B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x365 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x360 SWAP2 SWAP1 PUSH2 0x1362 JUMP JUMPDEST PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x372 SWAP2 SWAP1 PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0xAEB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39D SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4C8 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BF SWAP3 SWAP2 SWAP1 PUSH2 0x138F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4D2 DUP3 DUP3 PUSH2 0xAF8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4EA JUMPI PUSH2 0x4E9 PUSH2 0xE06 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x50C JUMPI PUSH2 0x50B PUSH2 0xE06 JUMP JUMPDEST JUMPDEST EQ PUSH2 0x543 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1425571C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 0x60A JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x57E JUMPI PUSH2 0x57D PUSH2 0x13B8 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1EEEAE8500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH2 0x602 SWAP1 PUSH2 0x1416 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x546 JUMP JUMPDEST POP PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x665 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBD4E069500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x805E1D667BDDB8A95F0F09880CF94F403FB596CE79928D9F29B74203BA284D4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x731 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x95D JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x7A0 JUMPI SELFBALANCE PUSH1 0x1 DUP1 SLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x762 JUMPI PUSH2 0x761 PUSH2 0xE06 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3A8D608600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x797 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x145F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x2 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x7C6 JUMPI PUSH2 0x7C5 PUSH2 0xE06 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x890 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x150E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8E2 SWAP2 SWAP1 PUSH2 0x1576 JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xCD6E45C8998311CAB7E9D4385596CAC867E20A0587194B954FA3A731C93CE78B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH4 0xFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH2 0xFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x985 JUMPI PUSH2 0x984 PUSH2 0xE06 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x999 JUMPI PUSH2 0x998 PUSH2 0xE06 JUMP JUMPDEST JUMPDEST EQ SWAP1 POP PUSH1 0x0 PUSH1 0x4 SLOAD PUSH1 0x3 SLOAD TIMESTAMP PUSH2 0x9AF SWAP2 SWAP1 PUSH2 0x15A3 JUMP JUMPDEST GT SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x1 DUP1 SLOAD SWAP1 POP GT SWAP1 POP PUSH1 0x0 DUP1 SELFBALANCE GT SWAP1 POP DUP4 DUP1 ISZERO PUSH2 0x9CF JUMPI POP DUP3 JUMPDEST DUP1 ISZERO PUSH2 0x9D8 JUMPI POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 0x9E1 JUMPI POP DUP1 JUMPDEST SWAP6 POP DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP6 POP SWAP6 POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA99 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA90 SWAP1 PUSH2 0x165A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xAB9 JUMPI PUSH2 0xAB8 PUSH2 0x13B8 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 SLOAD SWAP1 POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB14 JUMPI PUSH2 0xB13 PUSH2 0x13B8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xB26 SWAP2 SWAP1 PUSH2 0x16A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xB3E JUMPI PUSH2 0xB3D PUSH2 0x13B8 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xBD2 JUMPI PUSH2 0xBD1 PUSH2 0xE06 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBF2 JUMPI PUSH2 0xBF1 PUSH2 0xF4A JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC20 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0xC36 SWAP3 SWAP2 SWAP1 PUSH2 0xD2B JUMP JUMPDEST POP TIMESTAMP PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0xC64 SWAP1 PUSH2 0x170B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xCA1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xCA6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xCE1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA1D04B3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5B690EC4A06FE979403046EAEEA5B3CE38524683C3001F662C8B5A829632F7DF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xDA4 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xDA3 JUMPI DUP3 MLOAD DUP3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xD4B JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xDB1 SWAP2 SWAP1 PUSH2 0xDB5 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xDCE JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xDB6 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDE5 DUP2 PUSH2 0xDD2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE00 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDDC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0xE46 JUMPI PUSH2 0xE45 PUSH2 0xE06 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0xE57 DUP3 PUSH2 0xE35 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE67 DUP3 PUSH2 0xE49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE77 DUP2 PUSH2 0xE5C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE92 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xE6E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC3 DUP3 PUSH2 0xE98 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xED3 DUP2 PUSH2 0xEB8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xEEE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xECA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF11 DUP2 PUSH2 0xDD2 JUMP JUMPDEST DUP2 EQ PUSH2 0xF1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF2E DUP2 PUSH2 0xF08 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xF82 DUP3 PUSH2 0xF39 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xFA1 JUMPI PUSH2 0xFA0 PUSH2 0xF4A JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB4 PUSH2 0xEF4 JUMP JUMPDEST SWAP1 POP PUSH2 0xFC0 DUP3 DUP3 PUSH2 0xF79 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xFE0 JUMPI PUSH2 0xFDF PUSH2 0xF4A JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1009 PUSH2 0x1004 DUP5 PUSH2 0xFC5 JUMP JUMPDEST PUSH2 0xFAA JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x102C JUMPI PUSH2 0x102B PUSH2 0xFF1 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1055 JUMPI DUP1 PUSH2 0x1041 DUP9 DUP3 PUSH2 0xF1F JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x102E JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1074 JUMPI PUSH2 0x1073 PUSH2 0xF34 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1084 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xFF6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10A4 JUMPI PUSH2 0x10A3 PUSH2 0xEFE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10B2 DUP6 DUP3 DUP7 ADD PUSH2 0xF1F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10D3 JUMPI PUSH2 0x10D2 PUSH2 0xF03 JUMP JUMPDEST JUMPDEST PUSH2 0x10DF DUP6 DUP3 DUP7 ADD PUSH2 0x105F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1104 JUMPI PUSH2 0x1103 PUSH2 0xF34 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1121 JUMPI PUSH2 0x1120 PUSH2 0x10E9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x113D JUMPI PUSH2 0x113C PUSH2 0xFF1 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x115B JUMPI PUSH2 0x115A PUSH2 0xEFE JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1179 JUMPI PUSH2 0x1178 PUSH2 0xF03 JUMP JUMPDEST JUMPDEST PUSH2 0x1185 DUP6 DUP3 DUP7 ADD PUSH2 0x10EE JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x11B1 JUMPI PUSH2 0x11B0 PUSH2 0xF4A JUMP JUMPDEST JUMPDEST PUSH2 0x11BA DUP3 PUSH2 0xF39 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11E9 PUSH2 0x11E4 DUP5 PUSH2 0x1196 JUMP JUMPDEST PUSH2 0xFAA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1205 JUMPI PUSH2 0x1204 PUSH2 0x1191 JUMP JUMPDEST JUMPDEST PUSH2 0x1210 DUP5 DUP3 DUP6 PUSH2 0x11C7 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x122D JUMPI PUSH2 0x122C PUSH2 0xF34 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x123D DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x11D6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x125C JUMPI PUSH2 0x125B PUSH2 0xEFE JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x127A JUMPI PUSH2 0x1279 PUSH2 0xF03 JUMP JUMPDEST JUMPDEST PUSH2 0x1286 DUP5 DUP3 DUP6 ADD PUSH2 0x1218 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12A4 DUP2 PUSH2 0x128F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x12E4 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x12C9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x12F3 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1304 DUP3 PUSH2 0x12AA JUMP JUMPDEST PUSH2 0x130E DUP2 DUP6 PUSH2 0x12B5 JUMP JUMPDEST SWAP4 POP PUSH2 0x131E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x12C6 JUMP JUMPDEST PUSH2 0x1327 DUP2 PUSH2 0xF39 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1347 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x129B JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1359 DUP2 DUP5 PUSH2 0x12F9 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1378 JUMPI PUSH2 0x1377 PUSH2 0xEFE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1386 DUP5 DUP3 DUP6 ADD PUSH2 0xF1F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x13A4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xECA JUMP JUMPDEST PUSH2 0x13B1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xECA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1421 DUP3 PUSH2 0xDD2 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x1454 JUMPI PUSH2 0x1453 PUSH2 0x13E7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1474 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xDDC JUMP JUMPDEST PUSH2 0x1481 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xDDC JUMP JUMPDEST PUSH2 0x148E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xDDC JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14A9 DUP2 PUSH2 0x1496 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14CC DUP2 PUSH2 0x14AF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14E9 DUP2 PUSH2 0x14D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1508 DUP2 PUSH2 0x14EF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x1523 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x14A0 JUMP JUMPDEST PUSH2 0x1530 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x14C3 JUMP JUMPDEST PUSH2 0x153D PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x14E0 JUMP JUMPDEST PUSH2 0x154A PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x14FF JUMP JUMPDEST PUSH2 0x1557 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x14FF JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1570 DUP2 PUSH2 0xF08 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x158C JUMPI PUSH2 0x158B PUSH2 0xEFE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x159A DUP5 DUP3 DUP6 ADD PUSH2 0x1561 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15AE DUP3 PUSH2 0xDD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x15B9 DUP4 PUSH2 0xDD2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x15CC JUMPI PUSH2 0x15CB PUSH2 0x13E7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F6E6C7920726166666C654F776E65722063616E206368616E67652074686520 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x696E74657276616C000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1644 PUSH1 0x28 DUP4 PUSH2 0x15D7 JUMP JUMPDEST SWAP2 POP PUSH2 0x164F DUP3 PUSH2 0x15E8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1673 DUP2 PUSH2 0x1637 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x16B4 DUP3 PUSH2 0xDD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x16BF DUP4 PUSH2 0xDD2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x16CF JUMPI PUSH2 0x16CE PUSH2 0x167A JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16F5 PUSH1 0x0 DUP4 PUSH2 0x16DA JUMP JUMPDEST SWAP2 POP PUSH2 0x1700 DUP3 PUSH2 0x16E5 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1716 DUP3 PUSH2 0x16E8 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL 0x5E LT 0x22 CALL 0xEB LOG0 0xE0 LOG4 0xAA DIV 0x5E SIGNEXTEND 0xE5 0xE3 0xA6 RETURNDATASIZE 0xE5 0xAC PUSH8 0x62C0B138ECE50C9F 0x27 PUSH6 0x3FE864736F6C PUSH4 0x43000808 STOP CALLER ","sourceMap":"1713:10940:5:-:0;;;3469:705;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3691:16;5616:15:0;5599:32;;;;;;;;;;;;5556:80;3736:11:5::1;3720:27;;;;::::0;::::1;3803:16;3758:62;;;;;;;;;;::::0;::::1;3914:7;3902:19;;;;::::0;::::1;3951:14;3932:33;;;;;;;;;;::::0;::::1;3997:16;3976:37;;;;;;;;;;::::0;::::1;4040:16;4024:13;;:32;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;4085:15;4067;:33;;;;4122:9;4111:8;:20;;;;4156:10;4142:11;::::0;:24:::1;;;;;;;;;;;;;;;;;;3469:705:::0;;;;;;1713:10940;;88:117:6;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:77::-;882:7;911:5;900:16;;845:77;;;:::o;928:122::-;1001:24;1019:5;1001:24;:::i;:::-;994:5;991:35;981:63;;1040:1;1037;1030:12;981:63;928:122;:::o;1056:143::-;1113:5;1144:6;1138:13;1129:22;;1160:33;1187:5;1160:33;:::i;:::-;1056:143;;;;:::o;1205:77::-;1242:7;1271:5;1260:16;;1205:77;;;:::o;1288:122::-;1361:24;1379:5;1361:24;:::i;:::-;1354:5;1351:35;1341:63;;1400:1;1397;1390:12;1341:63;1288:122;:::o;1416:143::-;1473:5;1504:6;1498:13;1489:22;;1520:33;1547:5;1520:33;:::i;:::-;1416:143;;;;:::o;1565:101::-;1601:7;1641:18;1634:5;1630:30;1619:41;;1565:101;;;:::o;1672:120::-;1744:23;1761:5;1744:23;:::i;:::-;1737:5;1734:34;1724:62;;1782:1;1779;1772:12;1724:62;1672:120;:::o;1798:141::-;1854:5;1885:6;1879:13;1870:22;;1901:32;1927:5;1901:32;:::i;:::-;1798:141;;;;:::o;1945:93::-;1981:7;2021:10;2014:5;2010:22;1999:33;;1945:93;;;:::o;2044:120::-;2116:23;2133:5;2116:23;:::i;:::-;2109:5;2106:34;2096:62;;2154:1;2151;2144:12;2096:62;2044:120;:::o;2170:141::-;2226:5;2257:6;2251:13;2242:22;;2273:32;2299:5;2273:32;:::i;:::-;2170:141;;;;:::o;2317:1130::-;2430:6;2438;2446;2454;2462;2470;2519:3;2507:9;2498:7;2494:23;2490:33;2487:120;;;2526:79;;:::i;:::-;2487:120;2646:1;2671:64;2727:7;2718:6;2707:9;2703:22;2671:64;:::i;:::-;2661:74;;2617:128;2784:2;2810:64;2866:7;2857:6;2846:9;2842:22;2810:64;:::i;:::-;2800:74;;2755:129;2923:2;2949:64;3005:7;2996:6;2985:9;2981:22;2949:64;:::i;:::-;2939:74;;2894:129;3062:2;3088:63;3143:7;3134:6;3123:9;3119:22;3088:63;:::i;:::-;3078:73;;3033:128;3200:3;3227:63;3282:7;3273:6;3262:9;3258:22;3227:63;:::i;:::-;3217:73;;3171:129;3339:3;3366:64;3422:7;3413:6;3402:9;3398:22;3366:64;:::i;:::-;3356:74;;3310:130;2317:1130;;;;;;;;:::o;3453:180::-;3501:77;3498:1;3491:88;3598:4;3595:1;3588:15;3622:4;3619:1;3612:15;1713:10940:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@checkUpkeep_503":{"entryPoint":2397,"id":503,"parameterSlots":1,"returnSlots":2},"@enterRaffle_439":{"entryPoint":1238,"id":439,"parameterSlots":0,"returnSlots":0},"@fulfillRandomWords_625":{"entryPoint":2808,"id":625,"parameterSlots":2,"returnSlots":0},"@getEntranceFee_633":{"entryPoint":934,"id":633,"parameterSlots":0,"returnSlots":1},"@getInterval_687":{"entryPoint":2561,"id":687,"parameterSlots":0,"returnSlots":1},"@getLatestTimeStamp_713":{"entryPoint":1805,"id":713,"parameterSlots":0,"returnSlots":1},"@getNumWords_670":{"entryPoint":2369,"id":670,"parameterSlots":0,"returnSlots":1},"@getNumberOfPlayers_679":{"entryPoint":2795,"id":679,"parameterSlots":0,"returnSlots":1},"@getPlayer_645":{"entryPoint":2723,"id":645,"parameterSlots":1,"returnSlots":1},"@getRaffleOwner_741":{"entryPoint":1005,"id":741,"parameterSlots":0,"returnSlots":1},"@getRaffleState_662":{"entryPoint":974,"id":662,"parameterSlots":0,"returnSlots":1},"@getRecentWinner_653":{"entryPoint":2327,"id":653,"parameterSlots":0,"returnSlots":1},"@getRequestConfirmations_721":{"entryPoint":2384,"id":721,"parameterSlots":0,"returnSlots":1},"@moneyInContract_733":{"entryPoint":997,"id":733,"parameterSlots":0,"returnSlots":1},"@performUpkeep_554":{"entryPoint":1815,"id":554,"parameterSlots":2,"returnSlots":0},"@rawFulfillRandomWords_56":{"entryPoint":1046,"id":56,"parameterSlots":2,"returnSlots":0},"@updateInterval_705":{"entryPoint":2571,"id":705,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":4086,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":4566,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":4191,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":4334,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_bytes_memory_ptr":{"entryPoint":4632,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":3871,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":5473,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":4420,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes_memory_ptr":{"entryPoint":4678,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":4962,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":5494,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":4237,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":3786,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":4763,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":5280,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":4857,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_enum$_RaffleState_$260_to_t_uint8_fromStack":{"entryPoint":3694,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b_to_t_string_memory_ptr_fromStack":{"entryPoint":5687,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":5864,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":5344,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":3548,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32_fromStack":{"entryPoint":5375,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":5315,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5899,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":3801,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":5007,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4914,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":5390,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_enum$_RaffleState_$260__to_t_uint8__fromStack_reversed":{"entryPoint":3709,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5722,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":3563,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":5215,"id":null,"parameterSlots":4,"returnSlots":1},"allocate_memory":{"entryPoint":4010,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":3828,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":4037,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":4502,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":4778,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":4789,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":5850,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":5591,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":5539,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":3768,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":4751,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":5270,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_enum$_RaffleState_$260":{"entryPoint":3657,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":5330,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":3736,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":3538,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":5359,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":5295,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_enum$_RaffleState_$260_to_t_uint8":{"entryPoint":3676,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":4551,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":4806,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":3961,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":5142,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":5801,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":5095,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":5754,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":3590,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5048,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3914,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":4329,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":3892,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":4081,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":4497,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":3843,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":3838,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":3897,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b":{"entryPoint":5608,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":5861,"id":null,"parameterSlots":1,"returnSlots":0},"validator_assert_t_enum$_RaffleState_$260":{"entryPoint":3637,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":3848,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:17028:6","statements":[{"body":{"nodeType":"YulBlock","src":"52:32:6","statements":[{"nodeType":"YulAssignment","src":"62:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"73:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:6"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:6","type":""}],"src":"7:77:6"},{"body":{"nodeType":"YulBlock","src":"155:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"172:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"195:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"177:17:6"},"nodeType":"YulFunctionCall","src":"177:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"165:6:6"},"nodeType":"YulFunctionCall","src":"165:37:6"},"nodeType":"YulExpressionStatement","src":"165:37:6"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"143:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"150:3:6","type":""}],"src":"90:118:6"},{"body":{"nodeType":"YulBlock","src":"312:124:6","statements":[{"nodeType":"YulAssignment","src":"322:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"334:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"345:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"330:3:6"},"nodeType":"YulFunctionCall","src":"330:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"322:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"402:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"415:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"426:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"411:3:6"},"nodeType":"YulFunctionCall","src":"411:17:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"358:43:6"},"nodeType":"YulFunctionCall","src":"358:71:6"},"nodeType":"YulExpressionStatement","src":"358:71:6"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"284:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"296:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"307:4:6","type":""}],"src":"214:222:6"},{"body":{"nodeType":"YulBlock","src":"470:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"487:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"490:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"480:6:6"},"nodeType":"YulFunctionCall","src":"480:88:6"},"nodeType":"YulExpressionStatement","src":"480:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"584:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"587:4:6","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"577:6:6"},"nodeType":"YulFunctionCall","src":"577:15:6"},"nodeType":"YulExpressionStatement","src":"577:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"608:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"611:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"601:6:6"},"nodeType":"YulFunctionCall","src":"601:15:6"},"nodeType":"YulExpressionStatement","src":"601:15:6"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"442:180:6"},{"body":{"nodeType":"YulBlock","src":"686:62:6","statements":[{"body":{"nodeType":"YulBlock","src":"720:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nodeType":"YulIdentifier","src":"722:16:6"},"nodeType":"YulFunctionCall","src":"722:18:6"},"nodeType":"YulExpressionStatement","src":"722:18:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"709:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"716:1:6","type":"","value":"2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"706:2:6"},"nodeType":"YulFunctionCall","src":"706:12:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"699:6:6"},"nodeType":"YulFunctionCall","src":"699:20:6"},"nodeType":"YulIf","src":"696:46:6"}]},"name":"validator_assert_t_enum$_RaffleState_$260","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"679:5:6","type":""}],"src":"628:120:6"},{"body":{"nodeType":"YulBlock","src":"814:81:6","statements":[{"nodeType":"YulAssignment","src":"824:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"835:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"824:7:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"883:5:6"}],"functionName":{"name":"validator_assert_t_enum$_RaffleState_$260","nodeType":"YulIdentifier","src":"841:41:6"},"nodeType":"YulFunctionCall","src":"841:48:6"},"nodeType":"YulExpressionStatement","src":"841:48:6"}]},"name":"cleanup_t_enum$_RaffleState_$260","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"796:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"806:7:6","type":""}],"src":"754:141:6"},{"body":{"nodeType":"YulBlock","src":"974:68:6","statements":[{"nodeType":"YulAssignment","src":"984:52:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1030:5:6"}],"functionName":{"name":"cleanup_t_enum$_RaffleState_$260","nodeType":"YulIdentifier","src":"997:32:6"},"nodeType":"YulFunctionCall","src":"997:39:6"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"984:9:6"}]}]},"name":"convert_t_enum$_RaffleState_$260_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"954:5:6","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"964:9:6","type":""}],"src":"901:141:6"},{"body":{"nodeType":"YulBlock","src":"1126:79:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1143:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1192:5:6"}],"functionName":{"name":"convert_t_enum$_RaffleState_$260_to_t_uint8","nodeType":"YulIdentifier","src":"1148:43:6"},"nodeType":"YulFunctionCall","src":"1148:50:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1136:6:6"},"nodeType":"YulFunctionCall","src":"1136:63:6"},"nodeType":"YulExpressionStatement","src":"1136:63:6"}]},"name":"abi_encode_t_enum$_RaffleState_$260_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1114:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1121:3:6","type":""}],"src":"1048:157:6"},{"body":{"nodeType":"YulBlock","src":"1322:137:6","statements":[{"nodeType":"YulAssignment","src":"1332:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1344:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1355:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1340:3:6"},"nodeType":"YulFunctionCall","src":"1340:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1332:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1425:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1438:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1449:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1434:3:6"},"nodeType":"YulFunctionCall","src":"1434:17:6"}],"functionName":{"name":"abi_encode_t_enum$_RaffleState_$260_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"1368:56:6"},"nodeType":"YulFunctionCall","src":"1368:84:6"},"nodeType":"YulExpressionStatement","src":"1368:84:6"}]},"name":"abi_encode_tuple_t_enum$_RaffleState_$260__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1294:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1306:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1317:4:6","type":""}],"src":"1211:248:6"},{"body":{"nodeType":"YulBlock","src":"1510:81:6","statements":[{"nodeType":"YulAssignment","src":"1520:65:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1535:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"1542:42:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1531:3:6"},"nodeType":"YulFunctionCall","src":"1531:54:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1520:7:6"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1492:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1502:7:6","type":""}],"src":"1465:126:6"},{"body":{"nodeType":"YulBlock","src":"1642:51:6","statements":[{"nodeType":"YulAssignment","src":"1652:35:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1681:5:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1663:17:6"},"nodeType":"YulFunctionCall","src":"1663:24:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1652:7:6"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1624:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1634:7:6","type":""}],"src":"1597:96:6"},{"body":{"nodeType":"YulBlock","src":"1764:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1781:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1804:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1786:17:6"},"nodeType":"YulFunctionCall","src":"1786:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1774:6:6"},"nodeType":"YulFunctionCall","src":"1774:37:6"},"nodeType":"YulExpressionStatement","src":"1774:37:6"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1752:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1759:3:6","type":""}],"src":"1699:118:6"},{"body":{"nodeType":"YulBlock","src":"1921:124:6","statements":[{"nodeType":"YulAssignment","src":"1931:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1943:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1954:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1939:3:6"},"nodeType":"YulFunctionCall","src":"1939:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1931:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2011:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2024:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2035:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2020:3:6"},"nodeType":"YulFunctionCall","src":"2020:17:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"1967:43:6"},"nodeType":"YulFunctionCall","src":"1967:71:6"},"nodeType":"YulExpressionStatement","src":"1967:71:6"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1893:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1905:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1916:4:6","type":""}],"src":"1823:222:6"},{"body":{"nodeType":"YulBlock","src":"2091:35:6","statements":[{"nodeType":"YulAssignment","src":"2101:19:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2117:2:6","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2111:5:6"},"nodeType":"YulFunctionCall","src":"2111:9:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2101:6:6"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2084:6:6","type":""}],"src":"2051:75:6"},{"body":{"nodeType":"YulBlock","src":"2221:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2238:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2241:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2231:6:6"},"nodeType":"YulFunctionCall","src":"2231:12:6"},"nodeType":"YulExpressionStatement","src":"2231:12:6"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"2132:117:6"},{"body":{"nodeType":"YulBlock","src":"2344:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2361:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2364:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2354:6:6"},"nodeType":"YulFunctionCall","src":"2354:12:6"},"nodeType":"YulExpressionStatement","src":"2354:12:6"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"2255:117:6"},{"body":{"nodeType":"YulBlock","src":"2421:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"2478:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2487:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2490:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2480:6:6"},"nodeType":"YulFunctionCall","src":"2480:12:6"},"nodeType":"YulExpressionStatement","src":"2480:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2444:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2469:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2451:17:6"},"nodeType":"YulFunctionCall","src":"2451:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2441:2:6"},"nodeType":"YulFunctionCall","src":"2441:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2434:6:6"},"nodeType":"YulFunctionCall","src":"2434:43:6"},"nodeType":"YulIf","src":"2431:63:6"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2414:5:6","type":""}],"src":"2378:122:6"},{"body":{"nodeType":"YulBlock","src":"2558:87:6","statements":[{"nodeType":"YulAssignment","src":"2568:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2590:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2577:12:6"},"nodeType":"YulFunctionCall","src":"2577:20:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2568:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2633:5:6"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2606:26:6"},"nodeType":"YulFunctionCall","src":"2606:33:6"},"nodeType":"YulExpressionStatement","src":"2606:33:6"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2536:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"2544:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2552:5:6","type":""}],"src":"2506:139:6"},{"body":{"nodeType":"YulBlock","src":"2740:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2757:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2760:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2750:6:6"},"nodeType":"YulFunctionCall","src":"2750:12:6"},"nodeType":"YulExpressionStatement","src":"2750:12:6"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"2651:117:6"},{"body":{"nodeType":"YulBlock","src":"2822:54:6","statements":[{"nodeType":"YulAssignment","src":"2832:38:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2850:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"2857:2:6","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2846:3:6"},"nodeType":"YulFunctionCall","src":"2846:14:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2866:2:6","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2862:3:6"},"nodeType":"YulFunctionCall","src":"2862:7:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2842:3:6"},"nodeType":"YulFunctionCall","src":"2842:28:6"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2832:6:6"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2805:5:6","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2815:6:6","type":""}],"src":"2774:102:6"},{"body":{"nodeType":"YulBlock","src":"2910:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2927:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2930:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2920:6:6"},"nodeType":"YulFunctionCall","src":"2920:88:6"},"nodeType":"YulExpressionStatement","src":"2920:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3024:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3027:4:6","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3017:6:6"},"nodeType":"YulFunctionCall","src":"3017:15:6"},"nodeType":"YulExpressionStatement","src":"3017:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3048:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3051:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3041:6:6"},"nodeType":"YulFunctionCall","src":"3041:15:6"},"nodeType":"YulExpressionStatement","src":"3041:15:6"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2882:180:6"},{"body":{"nodeType":"YulBlock","src":"3111:238:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3121:58:6","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3143:6:6"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3173:4:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"3151:21:6"},"nodeType":"YulFunctionCall","src":"3151:27:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3139:3:6"},"nodeType":"YulFunctionCall","src":"3139:40:6"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3125:10:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"3290:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3292:16:6"},"nodeType":"YulFunctionCall","src":"3292:18:6"},"nodeType":"YulExpressionStatement","src":"3292:18:6"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3233:10:6"},{"kind":"number","nodeType":"YulLiteral","src":"3245:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3230:2:6"},"nodeType":"YulFunctionCall","src":"3230:34:6"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3269:10:6"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3281:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3266:2:6"},"nodeType":"YulFunctionCall","src":"3266:22:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3227:2:6"},"nodeType":"YulFunctionCall","src":"3227:62:6"},"nodeType":"YulIf","src":"3224:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3328:2:6","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3332:10:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3321:6:6"},"nodeType":"YulFunctionCall","src":"3321:22:6"},"nodeType":"YulExpressionStatement","src":"3321:22:6"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"3097:6:6","type":""},{"name":"size","nodeType":"YulTypedName","src":"3105:4:6","type":""}],"src":"3068:281:6"},{"body":{"nodeType":"YulBlock","src":"3396:88:6","statements":[{"nodeType":"YulAssignment","src":"3406:30:6","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"3416:18:6"},"nodeType":"YulFunctionCall","src":"3416:20:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3406:6:6"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3465:6:6"},{"name":"size","nodeType":"YulIdentifier","src":"3473:4:6"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"3445:19:6"},"nodeType":"YulFunctionCall","src":"3445:33:6"},"nodeType":"YulExpressionStatement","src":"3445:33:6"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"3380:4:6","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3389:6:6","type":""}],"src":"3355:129:6"},{"body":{"nodeType":"YulBlock","src":"3572:229:6","statements":[{"body":{"nodeType":"YulBlock","src":"3677:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3679:16:6"},"nodeType":"YulFunctionCall","src":"3679:18:6"},"nodeType":"YulExpressionStatement","src":"3679:18:6"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3649:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"3657:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3646:2:6"},"nodeType":"YulFunctionCall","src":"3646:30:6"},"nodeType":"YulIf","src":"3643:56:6"},{"nodeType":"YulAssignment","src":"3709:25:6","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3721:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"3729:4:6","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3717:3:6"},"nodeType":"YulFunctionCall","src":"3717:17:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3709:4:6"}]},{"nodeType":"YulAssignment","src":"3771:23:6","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3783:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"3789:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3779:3:6"},"nodeType":"YulFunctionCall","src":"3779:15:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3771:4:6"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"3556:6:6","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"3567:4:6","type":""}],"src":"3490:311:6"},{"body":{"nodeType":"YulBlock","src":"3896:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3913:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3916:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3906:6:6"},"nodeType":"YulFunctionCall","src":"3906:12:6"},"nodeType":"YulExpressionStatement","src":"3906:12:6"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"3807:117:6"},{"body":{"nodeType":"YulBlock","src":"4049:608:6","statements":[{"nodeType":"YulAssignment","src":"4059:90:6","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4141:6:6"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4084:56:6"},"nodeType":"YulFunctionCall","src":"4084:64:6"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4068:15:6"},"nodeType":"YulFunctionCall","src":"4068:81:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4059:5:6"}]},{"nodeType":"YulVariableDeclaration","src":"4158:16:6","value":{"name":"array","nodeType":"YulIdentifier","src":"4169:5:6"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4162:3:6","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4191:5:6"},{"name":"length","nodeType":"YulIdentifier","src":"4198:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4184:6:6"},"nodeType":"YulFunctionCall","src":"4184:21:6"},"nodeType":"YulExpressionStatement","src":"4184:21:6"},{"nodeType":"YulAssignment","src":"4214:23:6","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4225:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"4232:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4221:3:6"},"nodeType":"YulFunctionCall","src":"4221:16:6"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4214:3:6"}]},{"nodeType":"YulVariableDeclaration","src":"4247:44:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4265:6:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4277:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"4285:4:6","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4273:3:6"},"nodeType":"YulFunctionCall","src":"4273:17:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4261:3:6"},"nodeType":"YulFunctionCall","src":"4261:30:6"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"4251:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"4319:103:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"4333:77:6"},"nodeType":"YulFunctionCall","src":"4333:79:6"},"nodeType":"YulExpressionStatement","src":"4333:79:6"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"4306:6:6"},{"name":"end","nodeType":"YulIdentifier","src":"4314:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4303:2:6"},"nodeType":"YulFunctionCall","src":"4303:15:6"},"nodeType":"YulIf","src":"4300:122:6"},{"body":{"nodeType":"YulBlock","src":"4507:144:6","statements":[{"nodeType":"YulVariableDeclaration","src":"4522:21:6","value":{"name":"src","nodeType":"YulIdentifier","src":"4540:3:6"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"4526:10:6","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4564:3:6"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"4590:10:6"},{"name":"end","nodeType":"YulIdentifier","src":"4602:3:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4569:20:6"},"nodeType":"YulFunctionCall","src":"4569:37:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4557:6:6"},"nodeType":"YulFunctionCall","src":"4557:50:6"},"nodeType":"YulExpressionStatement","src":"4557:50:6"},{"nodeType":"YulAssignment","src":"4620:21:6","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4631:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"4636:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4627:3:6"},"nodeType":"YulFunctionCall","src":"4627:14:6"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4620:3:6"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4460:3:6"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"4465:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4457:2:6"},"nodeType":"YulFunctionCall","src":"4457:15:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4473:25:6","statements":[{"nodeType":"YulAssignment","src":"4475:21:6","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4486:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"4491:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4482:3:6"},"nodeType":"YulFunctionCall","src":"4482:14:6"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"4475:3:6"}]}]},"pre":{"nodeType":"YulBlock","src":"4435:21:6","statements":[{"nodeType":"YulVariableDeclaration","src":"4437:17:6","value":{"name":"offset","nodeType":"YulIdentifier","src":"4448:6:6"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"4441:3:6","type":""}]}]},"src":"4431:220:6"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4019:6:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"4027:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"4035:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4043:5:6","type":""}],"src":"3947:710:6"},{"body":{"nodeType":"YulBlock","src":"4757:293:6","statements":[{"body":{"nodeType":"YulBlock","src":"4806:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"4808:77:6"},"nodeType":"YulFunctionCall","src":"4808:79:6"},"nodeType":"YulExpressionStatement","src":"4808:79:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4785:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"4793:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4781:3:6"},"nodeType":"YulFunctionCall","src":"4781:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"4800:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4777:3:6"},"nodeType":"YulFunctionCall","src":"4777:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4770:6:6"},"nodeType":"YulFunctionCall","src":"4770:35:6"},"nodeType":"YulIf","src":"4767:122:6"},{"nodeType":"YulVariableDeclaration","src":"4898:34:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4925:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4912:12:6"},"nodeType":"YulFunctionCall","src":"4912:20:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4902:6:6","type":""}]},{"nodeType":"YulAssignment","src":"4941:103:6","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5017:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"5025:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5013:3:6"},"nodeType":"YulFunctionCall","src":"5013:17:6"},{"name":"length","nodeType":"YulIdentifier","src":"5032:6:6"},{"name":"end","nodeType":"YulIdentifier","src":"5040:3:6"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4950:62:6"},"nodeType":"YulFunctionCall","src":"4950:94:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4941:5:6"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4735:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"4743:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4751:5:6","type":""}],"src":"4680:370:6"},{"body":{"nodeType":"YulBlock","src":"5164:576:6","statements":[{"body":{"nodeType":"YulBlock","src":"5210:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5212:77:6"},"nodeType":"YulFunctionCall","src":"5212:79:6"},"nodeType":"YulExpressionStatement","src":"5212:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5185:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"5194:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5181:3:6"},"nodeType":"YulFunctionCall","src":"5181:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"5206:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5177:3:6"},"nodeType":"YulFunctionCall","src":"5177:32:6"},"nodeType":"YulIf","src":"5174:119:6"},{"nodeType":"YulBlock","src":"5303:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5318:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"5332:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5322:6:6","type":""}]},{"nodeType":"YulAssignment","src":"5347:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5382:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"5393:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5378:3:6"},"nodeType":"YulFunctionCall","src":"5378:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5402:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5357:20:6"},"nodeType":"YulFunctionCall","src":"5357:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5347:6:6"}]}]},{"nodeType":"YulBlock","src":"5430:303:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5445:46:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5476:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5487:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5472:3:6"},"nodeType":"YulFunctionCall","src":"5472:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5459:12:6"},"nodeType":"YulFunctionCall","src":"5459:32:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5449:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"5538:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5540:77:6"},"nodeType":"YulFunctionCall","src":"5540:79:6"},"nodeType":"YulExpressionStatement","src":"5540:79:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5510:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"5518:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5507:2:6"},"nodeType":"YulFunctionCall","src":"5507:30:6"},"nodeType":"YulIf","src":"5504:117:6"},{"nodeType":"YulAssignment","src":"5635:88:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5695:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"5706:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5691:3:6"},"nodeType":"YulFunctionCall","src":"5691:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5715:7:6"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"5645:45:6"},"nodeType":"YulFunctionCall","src":"5645:78:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5635:6:6"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5126:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5137:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5149:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5157:6:6","type":""}],"src":"5056:684:6"},{"body":{"nodeType":"YulBlock","src":"5835:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5852:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5855:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5845:6:6"},"nodeType":"YulFunctionCall","src":"5845:12:6"},"nodeType":"YulExpressionStatement","src":"5845:12:6"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"5746:117:6"},{"body":{"nodeType":"YulBlock","src":"5956:478:6","statements":[{"body":{"nodeType":"YulBlock","src":"6005:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"6007:77:6"},"nodeType":"YulFunctionCall","src":"6007:79:6"},"nodeType":"YulExpressionStatement","src":"6007:79:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5984:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"5992:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5980:3:6"},"nodeType":"YulFunctionCall","src":"5980:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"5999:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5976:3:6"},"nodeType":"YulFunctionCall","src":"5976:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5969:6:6"},"nodeType":"YulFunctionCall","src":"5969:35:6"},"nodeType":"YulIf","src":"5966:122:6"},{"nodeType":"YulAssignment","src":"6097:30:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6120:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6107:12:6"},"nodeType":"YulFunctionCall","src":"6107:20:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6097:6:6"}]},{"body":{"nodeType":"YulBlock","src":"6170:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"6172:77:6"},"nodeType":"YulFunctionCall","src":"6172:79:6"},"nodeType":"YulExpressionStatement","src":"6172:79:6"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6142:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"6150:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6139:2:6"},"nodeType":"YulFunctionCall","src":"6139:30:6"},"nodeType":"YulIf","src":"6136:117:6"},{"nodeType":"YulAssignment","src":"6262:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6278:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"6286:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6274:3:6"},"nodeType":"YulFunctionCall","src":"6274:17:6"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"6262:8:6"}]},{"body":{"nodeType":"YulBlock","src":"6345:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"6347:77:6"},"nodeType":"YulFunctionCall","src":"6347:79:6"},"nodeType":"YulExpressionStatement","src":"6347:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"6310:8:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6324:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"6332:4:6","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6320:3:6"},"nodeType":"YulFunctionCall","src":"6320:17:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6306:3:6"},"nodeType":"YulFunctionCall","src":"6306:32:6"},{"name":"end","nodeType":"YulIdentifier","src":"6340:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6303:2:6"},"nodeType":"YulFunctionCall","src":"6303:41:6"},"nodeType":"YulIf","src":"6300:128:6"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5923:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"5931:3:6","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"5939:8:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"5949:6:6","type":""}],"src":"5882:552:6"},{"body":{"nodeType":"YulBlock","src":"6525:442:6","statements":[{"body":{"nodeType":"YulBlock","src":"6571:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6573:77:6"},"nodeType":"YulFunctionCall","src":"6573:79:6"},"nodeType":"YulExpressionStatement","src":"6573:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6546:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"6555:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6542:3:6"},"nodeType":"YulFunctionCall","src":"6542:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"6567:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6538:3:6"},"nodeType":"YulFunctionCall","src":"6538:32:6"},"nodeType":"YulIf","src":"6535:119:6"},{"nodeType":"YulBlock","src":"6664:296:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6679:45:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6710:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6721:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6706:3:6"},"nodeType":"YulFunctionCall","src":"6706:17:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6693:12:6"},"nodeType":"YulFunctionCall","src":"6693:31:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6683:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"6771:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"6773:77:6"},"nodeType":"YulFunctionCall","src":"6773:79:6"},"nodeType":"YulExpressionStatement","src":"6773:79:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6743:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"6751:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6740:2:6"},"nodeType":"YulFunctionCall","src":"6740:30:6"},"nodeType":"YulIf","src":"6737:117:6"},{"nodeType":"YulAssignment","src":"6868:82:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6922:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"6933:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6918:3:6"},"nodeType":"YulFunctionCall","src":"6918:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6942:7:6"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"6886:31:6"},"nodeType":"YulFunctionCall","src":"6886:64:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6868:6:6"},{"name":"value1","nodeType":"YulIdentifier","src":"6876:6:6"}]}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6487:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6498:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6510:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6518:6:6","type":""}],"src":"6440:527:6"},{"body":{"nodeType":"YulBlock","src":"7062:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7079:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7082:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7072:6:6"},"nodeType":"YulFunctionCall","src":"7072:12:6"},"nodeType":"YulExpressionStatement","src":"7072:12:6"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"6973:117:6"},{"body":{"nodeType":"YulBlock","src":"7162:241:6","statements":[{"body":{"nodeType":"YulBlock","src":"7267:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7269:16:6"},"nodeType":"YulFunctionCall","src":"7269:18:6"},"nodeType":"YulExpressionStatement","src":"7269:18:6"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7239:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"7247:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7236:2:6"},"nodeType":"YulFunctionCall","src":"7236:30:6"},"nodeType":"YulIf","src":"7233:56:6"},{"nodeType":"YulAssignment","src":"7299:37:6","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7329:6:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7307:21:6"},"nodeType":"YulFunctionCall","src":"7307:29:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7299:4:6"}]},{"nodeType":"YulAssignment","src":"7373:23:6","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7385:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"7391:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7381:3:6"},"nodeType":"YulFunctionCall","src":"7381:15:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7373:4:6"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7146:6:6","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7157:4:6","type":""}],"src":"7096:307:6"},{"body":{"nodeType":"YulBlock","src":"7460:103:6","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7483:3:6"},{"name":"src","nodeType":"YulIdentifier","src":"7488:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"7493:6:6"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"7470:12:6"},"nodeType":"YulFunctionCall","src":"7470:30:6"},"nodeType":"YulExpressionStatement","src":"7470:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7541:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"7546:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7537:3:6"},"nodeType":"YulFunctionCall","src":"7537:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"7555:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7530:6:6"},"nodeType":"YulFunctionCall","src":"7530:27:6"},"nodeType":"YulExpressionStatement","src":"7530:27:6"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7442:3:6","type":""},{"name":"dst","nodeType":"YulTypedName","src":"7447:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"7452:6:6","type":""}],"src":"7409:154:6"},{"body":{"nodeType":"YulBlock","src":"7652:327:6","statements":[{"nodeType":"YulAssignment","src":"7662:74:6","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7728:6:6"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"7687:40:6"},"nodeType":"YulFunctionCall","src":"7687:48:6"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"7671:15:6"},"nodeType":"YulFunctionCall","src":"7671:65:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7662:5:6"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7752:5:6"},{"name":"length","nodeType":"YulIdentifier","src":"7759:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7745:6:6"},"nodeType":"YulFunctionCall","src":"7745:21:6"},"nodeType":"YulExpressionStatement","src":"7745:21:6"},{"nodeType":"YulVariableDeclaration","src":"7775:27:6","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7790:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"7797:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7786:3:6"},"nodeType":"YulFunctionCall","src":"7786:16:6"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"7779:3:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"7840:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"7842:77:6"},"nodeType":"YulFunctionCall","src":"7842:79:6"},"nodeType":"YulExpressionStatement","src":"7842:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7821:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"7826:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7817:3:6"},"nodeType":"YulFunctionCall","src":"7817:16:6"},{"name":"end","nodeType":"YulIdentifier","src":"7835:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7814:2:6"},"nodeType":"YulFunctionCall","src":"7814:25:6"},"nodeType":"YulIf","src":"7811:112:6"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7956:3:6"},{"name":"dst","nodeType":"YulIdentifier","src":"7961:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"7966:6:6"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"7932:23:6"},"nodeType":"YulFunctionCall","src":"7932:41:6"},"nodeType":"YulExpressionStatement","src":"7932:41:6"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7625:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"7630:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"7638:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7646:5:6","type":""}],"src":"7569:410:6"},{"body":{"nodeType":"YulBlock","src":"8059:277:6","statements":[{"body":{"nodeType":"YulBlock","src":"8108:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8110:77:6"},"nodeType":"YulFunctionCall","src":"8110:79:6"},"nodeType":"YulExpressionStatement","src":"8110:79:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8087:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"8095:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8083:3:6"},"nodeType":"YulFunctionCall","src":"8083:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"8102:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8079:3:6"},"nodeType":"YulFunctionCall","src":"8079:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8072:6:6"},"nodeType":"YulFunctionCall","src":"8072:35:6"},"nodeType":"YulIf","src":"8069:122:6"},{"nodeType":"YulVariableDeclaration","src":"8200:34:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8227:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8214:12:6"},"nodeType":"YulFunctionCall","src":"8214:20:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8204:6:6","type":""}]},{"nodeType":"YulAssignment","src":"8243:87:6","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8303:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"8311:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8299:3:6"},"nodeType":"YulFunctionCall","src":"8299:17:6"},{"name":"length","nodeType":"YulIdentifier","src":"8318:6:6"},{"name":"end","nodeType":"YulIdentifier","src":"8326:3:6"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8252:46:6"},"nodeType":"YulFunctionCall","src":"8252:78:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8243:5:6"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8037:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"8045:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8053:5:6","type":""}],"src":"7998:338:6"},{"body":{"nodeType":"YulBlock","src":"8417:432:6","statements":[{"body":{"nodeType":"YulBlock","src":"8463:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8465:77:6"},"nodeType":"YulFunctionCall","src":"8465:79:6"},"nodeType":"YulExpressionStatement","src":"8465:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8438:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"8447:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8434:3:6"},"nodeType":"YulFunctionCall","src":"8434:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"8459:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8430:3:6"},"nodeType":"YulFunctionCall","src":"8430:32:6"},"nodeType":"YulIf","src":"8427:119:6"},{"nodeType":"YulBlock","src":"8556:286:6","statements":[{"nodeType":"YulVariableDeclaration","src":"8571:45:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8602:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8613:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8598:3:6"},"nodeType":"YulFunctionCall","src":"8598:17:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8585:12:6"},"nodeType":"YulFunctionCall","src":"8585:31:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8575:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"8663:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"8665:77:6"},"nodeType":"YulFunctionCall","src":"8665:79:6"},"nodeType":"YulExpressionStatement","src":"8665:79:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8635:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"8643:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8632:2:6"},"nodeType":"YulFunctionCall","src":"8632:30:6"},"nodeType":"YulIf","src":"8629:117:6"},{"nodeType":"YulAssignment","src":"8760:72:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8804:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"8815:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8800:3:6"},"nodeType":"YulFunctionCall","src":"8800:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8824:7:6"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8770:29:6"},"nodeType":"YulFunctionCall","src":"8770:62:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8760:6:6"}]}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8387:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8398:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8410:6:6","type":""}],"src":"8342:507:6"},{"body":{"nodeType":"YulBlock","src":"8897:48:6","statements":[{"nodeType":"YulAssignment","src":"8907:32:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8932:5:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8925:6:6"},"nodeType":"YulFunctionCall","src":"8925:13:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8918:6:6"},"nodeType":"YulFunctionCall","src":"8918:21:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8907:7:6"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8879:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8889:7:6","type":""}],"src":"8855:90:6"},{"body":{"nodeType":"YulBlock","src":"9010:50:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9027:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9047:5:6"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"9032:14:6"},"nodeType":"YulFunctionCall","src":"9032:21:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9020:6:6"},"nodeType":"YulFunctionCall","src":"9020:34:6"},"nodeType":"YulExpressionStatement","src":"9020:34:6"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8998:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9005:3:6","type":""}],"src":"8951:109:6"},{"body":{"nodeType":"YulBlock","src":"9124:40:6","statements":[{"nodeType":"YulAssignment","src":"9135:22:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9151:5:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9145:5:6"},"nodeType":"YulFunctionCall","src":"9145:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9135:6:6"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9107:5:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"9117:6:6","type":""}],"src":"9066:98:6"},{"body":{"nodeType":"YulBlock","src":"9265:73:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9282:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"9287:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9275:6:6"},"nodeType":"YulFunctionCall","src":"9275:19:6"},"nodeType":"YulExpressionStatement","src":"9275:19:6"},{"nodeType":"YulAssignment","src":"9303:29:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9322:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"9327:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9318:3:6"},"nodeType":"YulFunctionCall","src":"9318:14:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9303:11:6"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9237:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"9242:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9253:11:6","type":""}],"src":"9170:168:6"},{"body":{"nodeType":"YulBlock","src":"9393:258:6","statements":[{"nodeType":"YulVariableDeclaration","src":"9403:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"9412:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"9407:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"9472:63:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9497:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"9502:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9493:3:6"},"nodeType":"YulFunctionCall","src":"9493:11:6"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9516:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"9521:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9512:3:6"},"nodeType":"YulFunctionCall","src":"9512:11:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9506:5:6"},"nodeType":"YulFunctionCall","src":"9506:18:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9486:6:6"},"nodeType":"YulFunctionCall","src":"9486:39:6"},"nodeType":"YulExpressionStatement","src":"9486:39:6"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9433:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"9436:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9430:2:6"},"nodeType":"YulFunctionCall","src":"9430:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9444:19:6","statements":[{"nodeType":"YulAssignment","src":"9446:15:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9455:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"9458:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9451:3:6"},"nodeType":"YulFunctionCall","src":"9451:10:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"9446:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"9426:3:6","statements":[]},"src":"9422:113:6"},{"body":{"nodeType":"YulBlock","src":"9569:76:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9619:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"9624:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9615:3:6"},"nodeType":"YulFunctionCall","src":"9615:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"9633:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9608:6:6"},"nodeType":"YulFunctionCall","src":"9608:27:6"},"nodeType":"YulExpressionStatement","src":"9608:27:6"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9550:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"9553:6:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9547:2:6"},"nodeType":"YulFunctionCall","src":"9547:13:6"},"nodeType":"YulIf","src":"9544:101:6"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"9375:3:6","type":""},{"name":"dst","nodeType":"YulTypedName","src":"9380:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"9385:6:6","type":""}],"src":"9344:307:6"},{"body":{"nodeType":"YulBlock","src":"9747:270:6","statements":[{"nodeType":"YulVariableDeclaration","src":"9757:52:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9803:5:6"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9771:31:6"},"nodeType":"YulFunctionCall","src":"9771:38:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9761:6:6","type":""}]},{"nodeType":"YulAssignment","src":"9818:77:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9883:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"9888:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9825:57:6"},"nodeType":"YulFunctionCall","src":"9825:70:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9818:3:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9930:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"9937:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9926:3:6"},"nodeType":"YulFunctionCall","src":"9926:16:6"},{"name":"pos","nodeType":"YulIdentifier","src":"9944:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"9949:6:6"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"9904:21:6"},"nodeType":"YulFunctionCall","src":"9904:52:6"},"nodeType":"YulExpressionStatement","src":"9904:52:6"},{"nodeType":"YulAssignment","src":"9965:46:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9976:3:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10003:6:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9981:21:6"},"nodeType":"YulFunctionCall","src":"9981:29:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9972:3:6"},"nodeType":"YulFunctionCall","src":"9972:39:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9965:3:6"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9728:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9735:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9743:3:6","type":""}],"src":"9657:360:6"},{"body":{"nodeType":"YulBlock","src":"10161:269:6","statements":[{"nodeType":"YulAssignment","src":"10171:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10183:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"10194:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10179:3:6"},"nodeType":"YulFunctionCall","src":"10179:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10171:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10245:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10258:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"10269:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10254:3:6"},"nodeType":"YulFunctionCall","src":"10254:17:6"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"10207:37:6"},"nodeType":"YulFunctionCall","src":"10207:65:6"},"nodeType":"YulExpressionStatement","src":"10207:65:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10293:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"10304:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10289:3:6"},"nodeType":"YulFunctionCall","src":"10289:18:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10313:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"10319:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10309:3:6"},"nodeType":"YulFunctionCall","src":"10309:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10282:6:6"},"nodeType":"YulFunctionCall","src":"10282:48:6"},"nodeType":"YulExpressionStatement","src":"10282:48:6"},{"nodeType":"YulAssignment","src":"10339:84:6","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10409:6:6"},{"name":"tail","nodeType":"YulIdentifier","src":"10418:4:6"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10347:61:6"},"nodeType":"YulFunctionCall","src":"10347:76:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10339:4:6"}]}]},"name":"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10125:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10137:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10145:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10156:4:6","type":""}],"src":"10023:407:6"},{"body":{"nodeType":"YulBlock","src":"10502:263:6","statements":[{"body":{"nodeType":"YulBlock","src":"10548:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10550:77:6"},"nodeType":"YulFunctionCall","src":"10550:79:6"},"nodeType":"YulExpressionStatement","src":"10550:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10523:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"10532:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10519:3:6"},"nodeType":"YulFunctionCall","src":"10519:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"10544:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10515:3:6"},"nodeType":"YulFunctionCall","src":"10515:32:6"},"nodeType":"YulIf","src":"10512:119:6"},{"nodeType":"YulBlock","src":"10641:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"10656:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"10670:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10660:6:6","type":""}]},{"nodeType":"YulAssignment","src":"10685:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10720:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"10731:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10716:3:6"},"nodeType":"YulFunctionCall","src":"10716:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10740:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10695:20:6"},"nodeType":"YulFunctionCall","src":"10695:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10685:6:6"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10472:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10483:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10495:6:6","type":""}],"src":"10436:329:6"},{"body":{"nodeType":"YulBlock","src":"10897:206:6","statements":[{"nodeType":"YulAssignment","src":"10907:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10919:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"10930:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10915:3:6"},"nodeType":"YulFunctionCall","src":"10915:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10907:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10987:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11000:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"11011:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10996:3:6"},"nodeType":"YulFunctionCall","src":"10996:17:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10943:43:6"},"nodeType":"YulFunctionCall","src":"10943:71:6"},"nodeType":"YulExpressionStatement","src":"10943:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11068:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11081:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"11092:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11077:3:6"},"nodeType":"YulFunctionCall","src":"11077:18:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11024:43:6"},"nodeType":"YulFunctionCall","src":"11024:72:6"},"nodeType":"YulExpressionStatement","src":"11024:72:6"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10861:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10873:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10881:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10892:4:6","type":""}],"src":"10771:332:6"},{"body":{"nodeType":"YulBlock","src":"11137:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11154:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11157:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11147:6:6"},"nodeType":"YulFunctionCall","src":"11147:88:6"},"nodeType":"YulExpressionStatement","src":"11147:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11251:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11254:4:6","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11244:6:6"},"nodeType":"YulFunctionCall","src":"11244:15:6"},"nodeType":"YulExpressionStatement","src":"11244:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11275:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11278:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11268:6:6"},"nodeType":"YulFunctionCall","src":"11268:15:6"},"nodeType":"YulExpressionStatement","src":"11268:15:6"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"11109:180:6"},{"body":{"nodeType":"YulBlock","src":"11323:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11340:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11343:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11333:6:6"},"nodeType":"YulFunctionCall","src":"11333:88:6"},"nodeType":"YulExpressionStatement","src":"11333:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11437:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11440:4:6","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11430:6:6"},"nodeType":"YulFunctionCall","src":"11430:15:6"},"nodeType":"YulExpressionStatement","src":"11430:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11461:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11464:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11454:6:6"},"nodeType":"YulFunctionCall","src":"11454:15:6"},"nodeType":"YulExpressionStatement","src":"11454:15:6"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"11295:180:6"},{"body":{"nodeType":"YulBlock","src":"11524:190:6","statements":[{"nodeType":"YulAssignment","src":"11534:33:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11561:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11543:17:6"},"nodeType":"YulFunctionCall","src":"11543:24:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11534:5:6"}]},{"body":{"nodeType":"YulBlock","src":"11657:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11659:16:6"},"nodeType":"YulFunctionCall","src":"11659:18:6"},"nodeType":"YulExpressionStatement","src":"11659:18:6"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11582:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"11589:66:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11579:2:6"},"nodeType":"YulFunctionCall","src":"11579:77:6"},"nodeType":"YulIf","src":"11576:103:6"},{"nodeType":"YulAssignment","src":"11688:20:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11699:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"11706:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11695:3:6"},"nodeType":"YulFunctionCall","src":"11695:13:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11688:3:6"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11510:5:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"11520:3:6","type":""}],"src":"11481:233:6"},{"body":{"nodeType":"YulBlock","src":"11874:288:6","statements":[{"nodeType":"YulAssignment","src":"11884:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11896:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"11907:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11892:3:6"},"nodeType":"YulFunctionCall","src":"11892:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11884:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11964:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11977:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"11988:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11973:3:6"},"nodeType":"YulFunctionCall","src":"11973:17:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"11920:43:6"},"nodeType":"YulFunctionCall","src":"11920:71:6"},"nodeType":"YulExpressionStatement","src":"11920:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12045:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12058:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12069:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12054:3:6"},"nodeType":"YulFunctionCall","src":"12054:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12001:43:6"},"nodeType":"YulFunctionCall","src":"12001:72:6"},"nodeType":"YulExpressionStatement","src":"12001:72:6"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"12127:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12140:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12151:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12136:3:6"},"nodeType":"YulFunctionCall","src":"12136:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12083:43:6"},"nodeType":"YulFunctionCall","src":"12083:72:6"},"nodeType":"YulExpressionStatement","src":"12083:72:6"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11830:9:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11842:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11850:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11858:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11869:4:6","type":""}],"src":"11720:442:6"},{"body":{"nodeType":"YulBlock","src":"12213:32:6","statements":[{"nodeType":"YulAssignment","src":"12223:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"12234:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"12223:7:6"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12195:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"12205:7:6","type":""}],"src":"12168:77:6"},{"body":{"nodeType":"YulBlock","src":"12316:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12333:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12356:5:6"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"12338:17:6"},"nodeType":"YulFunctionCall","src":"12338:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12326:6:6"},"nodeType":"YulFunctionCall","src":"12326:37:6"},"nodeType":"YulExpressionStatement","src":"12326:37:6"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12304:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12311:3:6","type":""}],"src":"12251:118:6"},{"body":{"nodeType":"YulBlock","src":"12419:57:6","statements":[{"nodeType":"YulAssignment","src":"12429:41:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12444:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"12451:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12440:3:6"},"nodeType":"YulFunctionCall","src":"12440:30:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"12429:7:6"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12401:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"12411:7:6","type":""}],"src":"12375:101:6"},{"body":{"nodeType":"YulBlock","src":"12545:52:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12562:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12584:5:6"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"12567:16:6"},"nodeType":"YulFunctionCall","src":"12567:23:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12555:6:6"},"nodeType":"YulFunctionCall","src":"12555:36:6"},"nodeType":"YulExpressionStatement","src":"12555:36:6"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12533:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12540:3:6","type":""}],"src":"12482:115:6"},{"body":{"nodeType":"YulBlock","src":"12647:45:6","statements":[{"nodeType":"YulAssignment","src":"12657:29:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12672:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"12679:6:6","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12668:3:6"},"nodeType":"YulFunctionCall","src":"12668:18:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"12657:7:6"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12629:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"12639:7:6","type":""}],"src":"12603:89:6"},{"body":{"nodeType":"YulBlock","src":"12761:52:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12778:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12800:5:6"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"12783:16:6"},"nodeType":"YulFunctionCall","src":"12783:23:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12771:6:6"},"nodeType":"YulFunctionCall","src":"12771:36:6"},"nodeType":"YulExpressionStatement","src":"12771:36:6"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12749:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12756:3:6","type":""}],"src":"12698:115:6"},{"body":{"nodeType":"YulBlock","src":"12863:49:6","statements":[{"nodeType":"YulAssignment","src":"12873:33:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12888:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"12895:10:6","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12884:3:6"},"nodeType":"YulFunctionCall","src":"12884:22:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"12873:7:6"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12845:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"12855:7:6","type":""}],"src":"12819:93:6"},{"body":{"nodeType":"YulBlock","src":"12981:52:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12998:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13020:5:6"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"13003:16:6"},"nodeType":"YulFunctionCall","src":"13003:23:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12991:6:6"},"nodeType":"YulFunctionCall","src":"12991:36:6"},"nodeType":"YulExpressionStatement","src":"12991:36:6"}]},"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12969:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12976:3:6","type":""}],"src":"12918:115:6"},{"body":{"nodeType":"YulBlock","src":"13241:446:6","statements":[{"nodeType":"YulAssignment","src":"13251:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13263:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13274:3:6","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13259:3:6"},"nodeType":"YulFunctionCall","src":"13259:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13251:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13332:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13345:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13356:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13341:3:6"},"nodeType":"YulFunctionCall","src":"13341:17:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"13288:43:6"},"nodeType":"YulFunctionCall","src":"13288:71:6"},"nodeType":"YulExpressionStatement","src":"13288:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13411:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13424:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13435:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13420:3:6"},"nodeType":"YulFunctionCall","src":"13420:18:6"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"13369:41:6"},"nodeType":"YulFunctionCall","src":"13369:70:6"},"nodeType":"YulExpressionStatement","src":"13369:70:6"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"13491:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13504:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13515:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13500:3:6"},"nodeType":"YulFunctionCall","src":"13500:18:6"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"13449:41:6"},"nodeType":"YulFunctionCall","src":"13449:70:6"},"nodeType":"YulExpressionStatement","src":"13449:70:6"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"13571:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13584:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13595:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13580:3:6"},"nodeType":"YulFunctionCall","src":"13580:18:6"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"13529:41:6"},"nodeType":"YulFunctionCall","src":"13529:70:6"},"nodeType":"YulExpressionStatement","src":"13529:70:6"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"13651:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13664:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13675:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13660:3:6"},"nodeType":"YulFunctionCall","src":"13660:19:6"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"13609:41:6"},"nodeType":"YulFunctionCall","src":"13609:71:6"},"nodeType":"YulExpressionStatement","src":"13609:71:6"}]},"name":"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13181:9:6","type":""},{"name":"value4","nodeType":"YulTypedName","src":"13193:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13201:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13209:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13217:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13225:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13236:4:6","type":""}],"src":"13039:648:6"},{"body":{"nodeType":"YulBlock","src":"13756:80:6","statements":[{"nodeType":"YulAssignment","src":"13766:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13781:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13775:5:6"},"nodeType":"YulFunctionCall","src":"13775:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13766:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13824:5:6"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"13797:26:6"},"nodeType":"YulFunctionCall","src":"13797:33:6"},"nodeType":"YulExpressionStatement","src":"13797:33:6"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13734:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"13742:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"13750:5:6","type":""}],"src":"13693:143:6"},{"body":{"nodeType":"YulBlock","src":"13919:274:6","statements":[{"body":{"nodeType":"YulBlock","src":"13965:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"13967:77:6"},"nodeType":"YulFunctionCall","src":"13967:79:6"},"nodeType":"YulExpressionStatement","src":"13967:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13940:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"13949:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13936:3:6"},"nodeType":"YulFunctionCall","src":"13936:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"13961:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13932:3:6"},"nodeType":"YulFunctionCall","src":"13932:32:6"},"nodeType":"YulIf","src":"13929:119:6"},{"nodeType":"YulBlock","src":"14058:128:6","statements":[{"nodeType":"YulVariableDeclaration","src":"14073:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"14087:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14077:6:6","type":""}]},{"nodeType":"YulAssignment","src":"14102:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14148:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"14159:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14144:3:6"},"nodeType":"YulFunctionCall","src":"14144:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14168:7:6"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"14112:31:6"},"nodeType":"YulFunctionCall","src":"14112:64:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14102:6:6"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13889:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13900:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13912:6:6","type":""}],"src":"13842:351:6"},{"body":{"nodeType":"YulBlock","src":"14244:146:6","statements":[{"nodeType":"YulAssignment","src":"14254:25:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14277:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"14259:17:6"},"nodeType":"YulFunctionCall","src":"14259:20:6"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"14254:1:6"}]},{"nodeType":"YulAssignment","src":"14288:25:6","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"14311:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"14293:17:6"},"nodeType":"YulFunctionCall","src":"14293:20:6"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"14288:1:6"}]},{"body":{"nodeType":"YulBlock","src":"14335:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14337:16:6"},"nodeType":"YulFunctionCall","src":"14337:18:6"},"nodeType":"YulExpressionStatement","src":"14337:18:6"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14329:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"14332:1:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14326:2:6"},"nodeType":"YulFunctionCall","src":"14326:8:6"},"nodeType":"YulIf","src":"14323:34:6"},{"nodeType":"YulAssignment","src":"14367:17:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14379:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"14382:1:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14375:3:6"},"nodeType":"YulFunctionCall","src":"14375:9:6"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"14367:4:6"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14230:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"14233:1:6","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"14239:4:6","type":""}],"src":"14199:191:6"},{"body":{"nodeType":"YulBlock","src":"14492:73:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14509:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"14514:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14502:6:6"},"nodeType":"YulFunctionCall","src":"14502:19:6"},"nodeType":"YulExpressionStatement","src":"14502:19:6"},{"nodeType":"YulAssignment","src":"14530:29:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14549:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"14554:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14545:3:6"},"nodeType":"YulFunctionCall","src":"14545:14:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"14530:11:6"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14464:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"14469:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"14480:11:6","type":""}],"src":"14396:169:6"},{"body":{"nodeType":"YulBlock","src":"14677:121:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14699:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"14707:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14695:3:6"},"nodeType":"YulFunctionCall","src":"14695:14:6"},{"hexValue":"4f6e6c7920726166666c654f776e65722063616e206368616e67652074686520","kind":"string","nodeType":"YulLiteral","src":"14711:34:6","type":"","value":"Only raffleOwner can change the "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14688:6:6"},"nodeType":"YulFunctionCall","src":"14688:58:6"},"nodeType":"YulExpressionStatement","src":"14688:58:6"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14767:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"14775:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14763:3:6"},"nodeType":"YulFunctionCall","src":"14763:15:6"},{"hexValue":"696e74657276616c","kind":"string","nodeType":"YulLiteral","src":"14780:10:6","type":"","value":"interval"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14756:6:6"},"nodeType":"YulFunctionCall","src":"14756:35:6"},"nodeType":"YulExpressionStatement","src":"14756:35:6"}]},"name":"store_literal_in_memory_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14669:6:6","type":""}],"src":"14571:227:6"},{"body":{"nodeType":"YulBlock","src":"14950:220:6","statements":[{"nodeType":"YulAssignment","src":"14960:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15026:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"15031:2:6","type":"","value":"40"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14967:58:6"},"nodeType":"YulFunctionCall","src":"14967:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14960:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15132:3:6"}],"functionName":{"name":"store_literal_in_memory_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b","nodeType":"YulIdentifier","src":"15043:88:6"},"nodeType":"YulFunctionCall","src":"15043:93:6"},"nodeType":"YulExpressionStatement","src":"15043:93:6"},{"nodeType":"YulAssignment","src":"15145:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15156:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"15161:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15152:3:6"},"nodeType":"YulFunctionCall","src":"15152:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15145:3:6"}]}]},"name":"abi_encode_t_stringliteral_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14938:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14946:3:6","type":""}],"src":"14804:366:6"},{"body":{"nodeType":"YulBlock","src":"15347:248:6","statements":[{"nodeType":"YulAssignment","src":"15357:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15369:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"15380:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15365:3:6"},"nodeType":"YulFunctionCall","src":"15365:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15357:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15404:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"15415:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15400:3:6"},"nodeType":"YulFunctionCall","src":"15400:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15423:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"15429:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15419:3:6"},"nodeType":"YulFunctionCall","src":"15419:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15393:6:6"},"nodeType":"YulFunctionCall","src":"15393:47:6"},"nodeType":"YulExpressionStatement","src":"15393:47:6"},{"nodeType":"YulAssignment","src":"15449:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15583:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15457:124:6"},"nodeType":"YulFunctionCall","src":"15457:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15449:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15327:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15342:4:6","type":""}],"src":"15176:419:6"},{"body":{"nodeType":"YulBlock","src":"15629:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15646:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15649:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15639:6:6"},"nodeType":"YulFunctionCall","src":"15639:88:6"},"nodeType":"YulExpressionStatement","src":"15639:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15743:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15746:4:6","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15736:6:6"},"nodeType":"YulFunctionCall","src":"15736:15:6"},"nodeType":"YulExpressionStatement","src":"15736:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15767:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15770:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15760:6:6"},"nodeType":"YulFunctionCall","src":"15760:15:6"},"nodeType":"YulExpressionStatement","src":"15760:15:6"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"15601:180:6"},{"body":{"nodeType":"YulBlock","src":"15821:142:6","statements":[{"nodeType":"YulAssignment","src":"15831:25:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15854:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15836:17:6"},"nodeType":"YulFunctionCall","src":"15836:20:6"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"15831:1:6"}]},{"nodeType":"YulAssignment","src":"15865:25:6","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"15888:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15870:17:6"},"nodeType":"YulFunctionCall","src":"15870:20:6"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"15865:1:6"}]},{"body":{"nodeType":"YulBlock","src":"15912:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"15914:16:6"},"nodeType":"YulFunctionCall","src":"15914:18:6"},"nodeType":"YulExpressionStatement","src":"15914:18:6"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"15909:1:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15902:6:6"},"nodeType":"YulFunctionCall","src":"15902:9:6"},"nodeType":"YulIf","src":"15899:35:6"},{"nodeType":"YulAssignment","src":"15943:14:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15952:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"15955:1:6"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"15948:3:6"},"nodeType":"YulFunctionCall","src":"15948:9:6"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"15943:1:6"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"15810:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"15813:1:6","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"15819:1:6","type":""}],"src":"15787:176:6"},{"body":{"nodeType":"YulBlock","src":"16082:34:6","statements":[{"nodeType":"YulAssignment","src":"16092:18:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"16107:3:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"16092:11:6"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16054:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"16059:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"16070:11:6","type":""}],"src":"15969:147:6"},{"body":{"nodeType":"YulBlock","src":"16228:8:6","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16220:6:6","type":""}],"src":"16122:114:6"},{"body":{"nodeType":"YulBlock","src":"16405:235:6","statements":[{"nodeType":"YulAssignment","src":"16415:90:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16498:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"16503:1:6","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16422:75:6"},"nodeType":"YulFunctionCall","src":"16422:83:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16415:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16603:3:6"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulIdentifier","src":"16514:88:6"},"nodeType":"YulFunctionCall","src":"16514:93:6"},"nodeType":"YulExpressionStatement","src":"16514:93:6"},{"nodeType":"YulAssignment","src":"16616:18:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16627:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"16632:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16623:3:6"},"nodeType":"YulFunctionCall","src":"16623:11:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16616:3:6"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16393:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16401:3:6","type":""}],"src":"16242:398:6"},{"body":{"nodeType":"YulBlock","src":"16834:191:6","statements":[{"nodeType":"YulAssignment","src":"16845:154:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16995:3:6"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16852:141:6"},"nodeType":"YulFunctionCall","src":"16852:147:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16845:3:6"}]},{"nodeType":"YulAssignment","src":"17009:10:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"17016:3:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17009:3:6"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16821:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16830:3:6","type":""}],"src":"16646:379:6"}]},"contents":"{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function validator_assert_t_enum$_RaffleState_$260(value) {\n        if iszero(lt(value, 2)) { panic_error_0x21() }\n    }\n\n    function cleanup_t_enum$_RaffleState_$260(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_RaffleState_$260(value)\n    }\n\n    function convert_t_enum$_RaffleState_$260_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_RaffleState_$260(value)\n    }\n\n    function abi_encode_t_enum$_RaffleState_$260_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_enum$_RaffleState_$260_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_enum$_RaffleState_$260__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_enum$_RaffleState_$260_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only raffleOwner can change the \")\n\n        mstore(add(memPtr, 32), \"interval\")\n\n    }\n\n    function abi_encode_t_stringliteral_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 40)\n        store_literal_in_memory_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_671d14f6f49e353a3dfe1bbf8fc26d54a34067397d716f49574f39e5c5b9d60b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n}\n","id":6,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"10":[{"length":32,"start":1048},{"length":32,"start":1132}],"263":[{"length":32,"start":1999}],"265":[{"length":32,"start":2059}],"267":[{"length":32,"start":2092}],"269":[{"length":32,"start":2127}],"279":[{"length":32,"start":938},{"length":32,"start":1549}]},"linkReferences":{},"object":"6080604052600436106100f35760003560e01c8063473f1ddc1161008a57806391ad27b41161005957806391ad27b4146102ea578063d0f0792614610315578063e55ae4e81461033e578063fd6673f51461037b576100f3565b8063473f1ddc1461022b57806353a2c19a146102565780635f1b0fd8146102815780636e04ff0d146102ac576100f3565b80631fe543e3116100c65780631fe543e3146101a45780632cfcc539146101cd578063320229eb146101d75780634585e33b14610202576100f3565b806309bc33a7146100f8578063115cbaf514610123578063173e42411461014e57806319a6ac8414610179575b600080fd5b34801561010457600080fd5b5061010d6103a6565b60405161011a9190610deb565b60405180910390f35b34801561012f57600080fd5b506101386103ce565b6040516101459190610e7d565b60405180910390f35b34801561015a57600080fd5b506101636103e5565b6040516101709190610deb565b60405180910390f35b34801561018557600080fd5b5061018e6103ed565b60405161019b9190610ed9565b60405180910390f35b3480156101b057600080fd5b506101cb60048036038101906101c6919061108d565b610416565b005b6101d56104d6565b005b3480156101e357600080fd5b506101ec61070d565b6040516101f99190610deb565b60405180910390f35b34801561020e57600080fd5b5061022960048036038101906102249190611144565b610717565b005b34801561023757600080fd5b50610240610917565b60405161024d9190610ed9565b60405180910390f35b34801561026257600080fd5b5061026b610941565b6040516102789190610deb565b60405180910390f35b34801561028d57600080fd5b50610296610950565b6040516102a39190610deb565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190611246565b61095d565b6040516102e1929190611332565b60405180910390f35b3480156102f657600080fd5b506102ff610a01565b60405161030c9190610deb565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190611362565b610a0b565b005b34801561034a57600080fd5b5061036560048036038101906103609190611362565b610aa3565b6040516103729190610ed9565b60405180910390f35b34801561038757600080fd5b50610390610aeb565b60405161039d9190610deb565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b600047905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104bf92919061138f565b60405180910390fd5b6104d28282610af8565b5050565b600060018111156104ea576104e9610e06565b5b600260149054906101000a900460ff16600181111561050c5761050b610e06565b5b14610543576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561060a573373ffffffffffffffffffffffffffffffffffffffff166001828154811061057e5761057d6113b8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156105f7576040517f1eeeae8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808061060290611416565b915050610546565b507f0000000000000000000000000000000000000000000000000000000000000000341015610665576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600354905090565b60006107316040518060200160405280600081525061095d565b509050806107a05747600180549050600260149054906101000a900460ff16600181111561076257610761610e06565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016107979392919061145f565b60405180910390fd5b6001600260146101000a81548160ff021916908360018111156107c6576107c5610e06565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161089095949392919061150e565b602060405180830381600087803b1580156108aa57600080fd5b505af11580156108be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e29190611576565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600260149054906101000a900460ff16600181111561098557610984610e06565b5b6000600181111561099957610998610e06565b5b1490506000600454600354426109af91906115a3565b119050600080600180549050119050600080471190508380156109cf5750825b80156109d85750815b80156109e15750805b955085604051806020016040528060008152509550955050505050915091565b6000600454905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a909061165a565b60405180910390fd5b8060048190555050565b600060018281548110610ab957610ab86113b8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600180549050905090565b600060018054905082600081518110610b1457610b136113b8565b5b6020026020010151610b2691906116a9565b9050600060018281548110610b3e57610b3d6113b8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff02191690836001811115610bd257610bd1610e06565b5b0217905550600067ffffffffffffffff811115610bf257610bf1610f4a565b5b604051908082528060200260200182016040528015610c205781602001602082028036833780820191505090505b5060019080519060200190610c36929190610d2b565b504260038190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610c649061170b565b60006040518083038185875af1925050503d8060008114610ca1576040519150601f19603f3d011682016040523d82523d6000602084013e610ca6565b606091505b5050905080610ce1576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610da4579160200282015b82811115610da35782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d4b565b5b509050610db19190610db5565b5090565b5b80821115610dce576000816000905550600101610db6565b5090565b6000819050919050565b610de581610dd2565b82525050565b6000602082019050610e006000830184610ddc565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610e4657610e45610e06565b5b50565b6000819050610e5782610e35565b919050565b6000610e6782610e49565b9050919050565b610e7781610e5c565b82525050565b6000602082019050610e926000830184610e6e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ec382610e98565b9050919050565b610ed381610eb8565b82525050565b6000602082019050610eee6000830184610eca565b92915050565b6000604051905090565b600080fd5b600080fd5b610f1181610dd2565b8114610f1c57600080fd5b50565b600081359050610f2e81610f08565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f8282610f39565b810181811067ffffffffffffffff82111715610fa157610fa0610f4a565b5b80604052505050565b6000610fb4610ef4565b9050610fc08282610f79565b919050565b600067ffffffffffffffff821115610fe057610fdf610f4a565b5b602082029050602081019050919050565b600080fd5b600061100961100484610fc5565b610faa565b9050808382526020820190506020840283018581111561102c5761102b610ff1565b5b835b8181101561105557806110418882610f1f565b84526020840193505060208101905061102e565b5050509392505050565b600082601f83011261107457611073610f34565b5b8135611084848260208601610ff6565b91505092915050565b600080604083850312156110a4576110a3610efe565b5b60006110b285828601610f1f565b925050602083013567ffffffffffffffff8111156110d3576110d2610f03565b5b6110df8582860161105f565b9150509250929050565b600080fd5b60008083601f84011261110457611103610f34565b5b8235905067ffffffffffffffff811115611121576111206110e9565b5b60208301915083600182028301111561113d5761113c610ff1565b5b9250929050565b6000806020838503121561115b5761115a610efe565b5b600083013567ffffffffffffffff81111561117957611178610f03565b5b611185858286016110ee565b92509250509250929050565b600080fd5b600067ffffffffffffffff8211156111b1576111b0610f4a565b5b6111ba82610f39565b9050602081019050919050565b82818337600083830152505050565b60006111e96111e484611196565b610faa565b90508281526020810184848401111561120557611204611191565b5b6112108482856111c7565b509392505050565b600082601f83011261122d5761122c610f34565b5b813561123d8482602086016111d6565b91505092915050565b60006020828403121561125c5761125b610efe565b5b600082013567ffffffffffffffff81111561127a57611279610f03565b5b61128684828501611218565b91505092915050565b60008115159050919050565b6112a48161128f565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112e45780820151818401526020810190506112c9565b838111156112f3576000848401525b50505050565b6000611304826112aa565b61130e81856112b5565b935061131e8185602086016112c6565b61132781610f39565b840191505092915050565b6000604082019050611347600083018561129b565b818103602083015261135981846112f9565b90509392505050565b60006020828403121561137857611377610efe565b5b600061138684828501610f1f565b91505092915050565b60006040820190506113a46000830185610eca565b6113b16020830184610eca565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142182610dd2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611454576114536113e7565b5b600182019050919050565b60006060820190506114746000830186610ddc565b6114816020830185610ddc565b61148e6040830184610ddc565b949350505050565b6000819050919050565b6114a981611496565b82525050565b600067ffffffffffffffff82169050919050565b6114cc816114af565b82525050565b600061ffff82169050919050565b6114e9816114d2565b82525050565b600063ffffffff82169050919050565b611508816114ef565b82525050565b600060a08201905061152360008301886114a0565b61153060208301876114c3565b61153d60408301866114e0565b61154a60608301856114ff565b61155760808301846114ff565b9695505050505050565b60008151905061157081610f08565b92915050565b60006020828403121561158c5761158b610efe565b5b600061159a84828501611561565b91505092915050565b60006115ae82610dd2565b91506115b983610dd2565b9250828210156115cc576115cb6113e7565b5b828203905092915050565b600082825260208201905092915050565b7f4f6e6c7920726166666c654f776e65722063616e206368616e6765207468652060008201527f696e74657276616c000000000000000000000000000000000000000000000000602082015250565b60006116446028836115d7565b915061164f826115e8565b604082019050919050565b6000602082019050818103600083015261167381611637565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006116b482610dd2565b91506116bf83610dd2565b9250826116cf576116ce61167a565b5b828206905092915050565b600081905092915050565b50565b60006116f56000836116da565b9150611700826116e5565b600082019050919050565b6000611716826116e8565b915081905091905056fea2646970667358221220025e1022f1eba0e0a4aa045e0be5e3a63de5ac6762c0b138ece50c9f27653fe864736f6c63430008080033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x473F1DDC GT PUSH2 0x8A JUMPI DUP1 PUSH4 0x91AD27B4 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x91AD27B4 EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0xD0F07926 EQ PUSH2 0x315 JUMPI DUP1 PUSH4 0xE55AE4E8 EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0xFD6673F5 EQ PUSH2 0x37B JUMPI PUSH2 0xF3 JUMP JUMPDEST DUP1 PUSH4 0x473F1DDC EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x53A2C19A EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0x5F1B0FD8 EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x2AC JUMPI PUSH2 0xF3 JUMP JUMPDEST DUP1 PUSH4 0x1FE543E3 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0x320229EB EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x202 JUMPI PUSH2 0xF3 JUMP JUMPDEST DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x115CBAF5 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x173E4241 EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x19A6AC84 EQ PUSH2 0x179 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x3A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x3CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x145 SWAP2 SWAP1 PUSH2 0xE7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x170 SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19B SWAP2 SWAP1 PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C6 SWAP2 SWAP1 PUSH2 0x108D JUMP JUMPDEST PUSH2 0x416 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D5 PUSH2 0x4D6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH2 0x70D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F9 SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x229 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x224 SWAP2 SWAP1 PUSH2 0x1144 JUMP JUMPDEST PUSH2 0x717 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH2 0x917 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24D SWAP2 SWAP1 PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x941 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x278 SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x296 PUSH2 0x950 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A3 SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CE SWAP2 SWAP1 PUSH2 0x1246 JUMP JUMPDEST PUSH2 0x95D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E1 SWAP3 SWAP2 SWAP1 PUSH2 0x1332 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FF PUSH2 0xA01 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30C SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x337 SWAP2 SWAP1 PUSH2 0x1362 JUMP JUMPDEST PUSH2 0xA0B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x365 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x360 SWAP2 SWAP1 PUSH2 0x1362 JUMP JUMPDEST PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x372 SWAP2 SWAP1 PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0xAEB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39D SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4C8 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BF SWAP3 SWAP2 SWAP1 PUSH2 0x138F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4D2 DUP3 DUP3 PUSH2 0xAF8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4EA JUMPI PUSH2 0x4E9 PUSH2 0xE06 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x50C JUMPI PUSH2 0x50B PUSH2 0xE06 JUMP JUMPDEST JUMPDEST EQ PUSH2 0x543 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1425571C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 0x60A JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x57E JUMPI PUSH2 0x57D PUSH2 0x13B8 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1EEEAE8500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH2 0x602 SWAP1 PUSH2 0x1416 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x546 JUMP JUMPDEST POP PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x665 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBD4E069500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x805E1D667BDDB8A95F0F09880CF94F403FB596CE79928D9F29B74203BA284D4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x731 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x95D JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x7A0 JUMPI SELFBALANCE PUSH1 0x1 DUP1 SLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x762 JUMPI PUSH2 0x761 PUSH2 0xE06 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3A8D608600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x797 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x145F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x2 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x7C6 JUMPI PUSH2 0x7C5 PUSH2 0xE06 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x890 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x150E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8E2 SWAP2 SWAP1 PUSH2 0x1576 JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xCD6E45C8998311CAB7E9D4385596CAC867E20A0587194B954FA3A731C93CE78B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH4 0xFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH2 0xFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x985 JUMPI PUSH2 0x984 PUSH2 0xE06 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x999 JUMPI PUSH2 0x998 PUSH2 0xE06 JUMP JUMPDEST JUMPDEST EQ SWAP1 POP PUSH1 0x0 PUSH1 0x4 SLOAD PUSH1 0x3 SLOAD TIMESTAMP PUSH2 0x9AF SWAP2 SWAP1 PUSH2 0x15A3 JUMP JUMPDEST GT SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x1 DUP1 SLOAD SWAP1 POP GT SWAP1 POP PUSH1 0x0 DUP1 SELFBALANCE GT SWAP1 POP DUP4 DUP1 ISZERO PUSH2 0x9CF JUMPI POP DUP3 JUMPDEST DUP1 ISZERO PUSH2 0x9D8 JUMPI POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 0x9E1 JUMPI POP DUP1 JUMPDEST SWAP6 POP DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP6 POP SWAP6 POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA99 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA90 SWAP1 PUSH2 0x165A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xAB9 JUMPI PUSH2 0xAB8 PUSH2 0x13B8 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 SLOAD SWAP1 POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB14 JUMPI PUSH2 0xB13 PUSH2 0x13B8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xB26 SWAP2 SWAP1 PUSH2 0x16A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xB3E JUMPI PUSH2 0xB3D PUSH2 0x13B8 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xBD2 JUMPI PUSH2 0xBD1 PUSH2 0xE06 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBF2 JUMPI PUSH2 0xBF1 PUSH2 0xF4A JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC20 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0xC36 SWAP3 SWAP2 SWAP1 PUSH2 0xD2B JUMP JUMPDEST POP TIMESTAMP PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0xC64 SWAP1 PUSH2 0x170B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xCA1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xCA6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xCE1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA1D04B3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5B690EC4A06FE979403046EAEEA5B3CE38524683C3001F662C8B5A829632F7DF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xDA4 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xDA3 JUMPI DUP3 MLOAD DUP3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xD4B JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xDB1 SWAP2 SWAP1 PUSH2 0xDB5 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xDCE JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xDB6 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDE5 DUP2 PUSH2 0xDD2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE00 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDDC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0xE46 JUMPI PUSH2 0xE45 PUSH2 0xE06 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0xE57 DUP3 PUSH2 0xE35 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE67 DUP3 PUSH2 0xE49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE77 DUP2 PUSH2 0xE5C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE92 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xE6E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC3 DUP3 PUSH2 0xE98 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xED3 DUP2 PUSH2 0xEB8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xEEE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xECA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF11 DUP2 PUSH2 0xDD2 JUMP JUMPDEST DUP2 EQ PUSH2 0xF1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF2E DUP2 PUSH2 0xF08 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xF82 DUP3 PUSH2 0xF39 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xFA1 JUMPI PUSH2 0xFA0 PUSH2 0xF4A JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB4 PUSH2 0xEF4 JUMP JUMPDEST SWAP1 POP PUSH2 0xFC0 DUP3 DUP3 PUSH2 0xF79 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xFE0 JUMPI PUSH2 0xFDF PUSH2 0xF4A JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1009 PUSH2 0x1004 DUP5 PUSH2 0xFC5 JUMP JUMPDEST PUSH2 0xFAA JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x102C JUMPI PUSH2 0x102B PUSH2 0xFF1 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1055 JUMPI DUP1 PUSH2 0x1041 DUP9 DUP3 PUSH2 0xF1F JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x102E JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1074 JUMPI PUSH2 0x1073 PUSH2 0xF34 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1084 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xFF6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10A4 JUMPI PUSH2 0x10A3 PUSH2 0xEFE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10B2 DUP6 DUP3 DUP7 ADD PUSH2 0xF1F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10D3 JUMPI PUSH2 0x10D2 PUSH2 0xF03 JUMP JUMPDEST JUMPDEST PUSH2 0x10DF DUP6 DUP3 DUP7 ADD PUSH2 0x105F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1104 JUMPI PUSH2 0x1103 PUSH2 0xF34 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1121 JUMPI PUSH2 0x1120 PUSH2 0x10E9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x113D JUMPI PUSH2 0x113C PUSH2 0xFF1 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x115B JUMPI PUSH2 0x115A PUSH2 0xEFE JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1179 JUMPI PUSH2 0x1178 PUSH2 0xF03 JUMP JUMPDEST JUMPDEST PUSH2 0x1185 DUP6 DUP3 DUP7 ADD PUSH2 0x10EE JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x11B1 JUMPI PUSH2 0x11B0 PUSH2 0xF4A JUMP JUMPDEST JUMPDEST PUSH2 0x11BA DUP3 PUSH2 0xF39 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11E9 PUSH2 0x11E4 DUP5 PUSH2 0x1196 JUMP JUMPDEST PUSH2 0xFAA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1205 JUMPI PUSH2 0x1204 PUSH2 0x1191 JUMP JUMPDEST JUMPDEST PUSH2 0x1210 DUP5 DUP3 DUP6 PUSH2 0x11C7 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x122D JUMPI PUSH2 0x122C PUSH2 0xF34 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x123D DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x11D6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x125C JUMPI PUSH2 0x125B PUSH2 0xEFE JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x127A JUMPI PUSH2 0x1279 PUSH2 0xF03 JUMP JUMPDEST JUMPDEST PUSH2 0x1286 DUP5 DUP3 DUP6 ADD PUSH2 0x1218 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12A4 DUP2 PUSH2 0x128F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x12E4 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x12C9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x12F3 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1304 DUP3 PUSH2 0x12AA JUMP JUMPDEST PUSH2 0x130E DUP2 DUP6 PUSH2 0x12B5 JUMP JUMPDEST SWAP4 POP PUSH2 0x131E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x12C6 JUMP JUMPDEST PUSH2 0x1327 DUP2 PUSH2 0xF39 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1347 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x129B JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1359 DUP2 DUP5 PUSH2 0x12F9 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1378 JUMPI PUSH2 0x1377 PUSH2 0xEFE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1386 DUP5 DUP3 DUP6 ADD PUSH2 0xF1F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x13A4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xECA JUMP JUMPDEST PUSH2 0x13B1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xECA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1421 DUP3 PUSH2 0xDD2 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x1454 JUMPI PUSH2 0x1453 PUSH2 0x13E7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1474 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xDDC JUMP JUMPDEST PUSH2 0x1481 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xDDC JUMP JUMPDEST PUSH2 0x148E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xDDC JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14A9 DUP2 PUSH2 0x1496 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14CC DUP2 PUSH2 0x14AF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14E9 DUP2 PUSH2 0x14D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1508 DUP2 PUSH2 0x14EF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x1523 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x14A0 JUMP JUMPDEST PUSH2 0x1530 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x14C3 JUMP JUMPDEST PUSH2 0x153D PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x14E0 JUMP JUMPDEST PUSH2 0x154A PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x14FF JUMP JUMPDEST PUSH2 0x1557 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x14FF JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1570 DUP2 PUSH2 0xF08 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x158C JUMPI PUSH2 0x158B PUSH2 0xEFE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x159A DUP5 DUP3 DUP6 ADD PUSH2 0x1561 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15AE DUP3 PUSH2 0xDD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x15B9 DUP4 PUSH2 0xDD2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x15CC JUMPI PUSH2 0x15CB PUSH2 0x13E7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F6E6C7920726166666C654F776E65722063616E206368616E67652074686520 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x696E74657276616C000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1644 PUSH1 0x28 DUP4 PUSH2 0x15D7 JUMP JUMPDEST SWAP2 POP PUSH2 0x164F DUP3 PUSH2 0x15E8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1673 DUP2 PUSH2 0x1637 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x16B4 DUP3 PUSH2 0xDD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x16BF DUP4 PUSH2 0xDD2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x16CF JUMPI PUSH2 0x16CE PUSH2 0x167A JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16F5 PUSH1 0x0 DUP4 PUSH2 0x16DA JUMP JUMPDEST SWAP2 POP PUSH2 0x1700 DUP3 PUSH2 0x16E5 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1716 DUP3 PUSH2 0x16E8 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL 0x5E LT 0x22 CALL 0xEB LOG0 0xE0 LOG4 0xAA DIV 0x5E SIGNEXTEND 0xE5 0xE3 0xA6 RETURNDATASIZE 0xE5 0xAC PUSH8 0x62C0B138ECE50C9F 0x27 PUSH6 0x3FE864736F6C PUSH4 0x43000808 STOP CALLER ","sourceMap":"1713:10940:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11272:95;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;11594:99;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;12445:104;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;12557:93;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6618:256:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4664:441:5;;;:::i;:::-;;12217:101;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7709:2110;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;11489:97;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;11701:120;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;12326:111;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6417:872;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;11939:87;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;12034:175;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;11375:106;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;11829:102;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;11272:95;11319:7;11346:13;11339:20;;11272:95;:::o;11594:99::-;11641:11;11672:13;;;;;;;;;;;11665:20;;11594:99;:::o;12445:104::-;12493:7;12520:21;12513:28;;12445:104;:::o;12557:93::-;12604:7;12631:11;;;;;;;;;;;12624:18;;12557:93;:::o;6618:256:0:-;6731:14;6717:28;;:10;:28;;;6713:109;;6788:10;6800:14;6762:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;4664:441:5:-;4453:16;4436:33;;;;;;;;:::i;:::-;;:13;;;;;;;;;;;:33;;;;;;;;:::i;:::-;;;4432:63;;4478:17;;;;;;;;;;;;;;4432:63;4231:6:::1;4226:134;4247:9;:16;;;;4243:1;:20;4226:134;;;4305:10;4289:26;;:9;4299:1;4289:12;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:26;;;4285:63;;;4324:24;;;;;;;;;;;;;;4285:63;4265:3;;;;;:::i;:::-;;;;4226:134;;;;4585:13:::2;4573:9;:25;4569:67;;;4607:29;;;;;;;;;;;;;;4569:67;4898:9:::3;4921:10;4898:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5086:10;5074:23;;;;;;;;;;;;4664:441::o:0;12217:101::-;12268:7;12295:15;;12288:22;;12217:101;:::o;7709:2110::-;8841:17;8864:15;;;;;;;;;;;;;:11;:15::i;:::-;8840:39;;;8895:12;8890:315;;8973:21;9013:9;:16;;;;9056:13;;;;;;;;;;;9048:22;;;;;;;;:::i;:::-;;8931:154;;;;;;;;;;;;;:::i;:::-;;;;;;;;8890:315;9233:23;9217:13;;:39;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;9414:17;9434:16;:35;;;9484:9;9529:16;2500:1;9595:18;2544:1;9434:214;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9414:234;;9801:9;9779:32;;;;;;;;;;7847:1972;;7709:2110;;:::o;11489:97::-;11537:7;11564:14;;;;;;;;;;;11557:21;;11489:97;:::o;11701:120::-;11745:7;2544:1;11765:16;;;;11701:120;:::o;12326:111::-;12382:7;2500:1;12402:27;;;;12326:111;:::o;6417:872::-;6514:17;6533:12;6576:11;6611:13;;;;;;;;;;;6591:33;;;;;;;;:::i;:::-;;:16;:33;;;;;;;;:::i;:::-;;;6576:49;;6636:15;6693:8;;6674:15;;6656;:33;;;;:::i;:::-;6655:46;6636:66;;6713:15;6751:1;6732:9;:16;;;;:20;6713:40;;6764:15;6806:1;6782:21;:25;6764:43;;6834:6;:20;;;;;6844:10;6834:20;:34;;;;;6858:10;6834:34;:48;;;;;6872:10;6834:48;6818:65;;6902:12;6894:25;;;;;;;;;;;;;;;;;;;;6417:872;;;:::o;11939:87::-;11983:7;12010:8;;12003:15;;11939:87;:::o;12034:175::-;12114:11;;;;;;;;;;12100:25;;:10;:25;;;12092:78;;;;;;;;;;;;:::i;:::-;;;;;;;;;12192:9;12181:8;:20;;;;12034:175;:::o;11375:106::-;11430:7;11457:9;11467:5;11457:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11450:23;;11375:106;;;:::o;11829:102::-;11880:7;11907:9;:16;;;;11900:23;;11829:102;:::o;10220:1044::-;10621:21;10662:9;:16;;;;10645:11;10657:1;10645:14;;;;;;;;:::i;:::-;;;;;;;;:33;;;;:::i;:::-;10621:57;;10689:28;10720:9;10730:13;10720:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10689:55;;10772:12;10755:14;;:29;;;;;;;;;;;;;;;;;;10811:16;10795:13;;:32;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;10897:1;10875:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10863:9;:36;;;;;;;;;;;;:::i;:::-;;10960:15;10942;:33;;;;10989:12;11007;:17;;11032:21;11007:51;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10988:70;;;11148:7;11143:72;;11179:24;;;;;;;;;;;;;;11143:72;11243:12;11230:26;;;;;;;;;;;;10459:805;;;10220:1044;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:77:6:-;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:222::-;307:4;345:2;334:9;330:18;322:26;;358:71;426:1;415:9;411:17;402:6;358:71;:::i;:::-;214:222;;;;:::o;442:180::-;490:77;487:1;480:88;587:4;584:1;577:15;611:4;608:1;601:15;628:120;716:1;709:5;706:12;696:46;;722:18;;:::i;:::-;696:46;628:120;:::o;754:141::-;806:7;835:5;824:16;;841:48;883:5;841:48;:::i;:::-;754:141;;;:::o;901:::-;964:9;997:39;1030:5;997:39;:::i;:::-;984:52;;901:141;;;:::o;1048:157::-;1148:50;1192:5;1148:50;:::i;:::-;1143:3;1136:63;1048:157;;:::o;1211:248::-;1317:4;1355:2;1344:9;1340:18;1332:26;;1368:84;1449:1;1438:9;1434:17;1425:6;1368:84;:::i;:::-;1211:248;;;;:::o;1465:126::-;1502:7;1542:42;1535:5;1531:54;1520:65;;1465:126;;;:::o;1597:96::-;1634:7;1663:24;1681:5;1663:24;:::i;:::-;1652:35;;1597:96;;;:::o;1699:118::-;1786:24;1804:5;1786:24;:::i;:::-;1781:3;1774:37;1699:118;;:::o;1823:222::-;1916:4;1954:2;1943:9;1939:18;1931:26;;1967:71;2035:1;2024:9;2020:17;2011:6;1967:71;:::i;:::-;1823:222;;;;:::o;2051:75::-;2084:6;2117:2;2111:9;2101:19;;2051:75;:::o;2132:117::-;2241:1;2238;2231:12;2255:117;2364:1;2361;2354:12;2378:122;2451:24;2469:5;2451:24;:::i;:::-;2444:5;2441:35;2431:63;;2490:1;2487;2480:12;2431:63;2378:122;:::o;2506:139::-;2552:5;2590:6;2577:20;2568:29;;2606:33;2633:5;2606:33;:::i;:::-;2506:139;;;;:::o;2651:117::-;2760:1;2757;2750:12;2774:102;2815:6;2866:2;2862:7;2857:2;2850:5;2846:14;2842:28;2832:38;;2774:102;;;:::o;2882:180::-;2930:77;2927:1;2920:88;3027:4;3024:1;3017:15;3051:4;3048:1;3041:15;3068:281;3151:27;3173:4;3151:27;:::i;:::-;3143:6;3139:40;3281:6;3269:10;3266:22;3245:18;3233:10;3230:34;3227:62;3224:88;;;3292:18;;:::i;:::-;3224:88;3332:10;3328:2;3321:22;3111:238;3068:281;;:::o;3355:129::-;3389:6;3416:20;;:::i;:::-;3406:30;;3445:33;3473:4;3465:6;3445:33;:::i;:::-;3355:129;;;:::o;3490:311::-;3567:4;3657:18;3649:6;3646:30;3643:56;;;3679:18;;:::i;:::-;3643:56;3729:4;3721:6;3717:17;3709:25;;3789:4;3783;3779:15;3771:23;;3490:311;;;:::o;3807:117::-;3916:1;3913;3906:12;3947:710;4043:5;4068:81;4084:64;4141:6;4084:64;:::i;:::-;4068:81;:::i;:::-;4059:90;;4169:5;4198:6;4191:5;4184:21;4232:4;4225:5;4221:16;4214:23;;4285:4;4277:6;4273:17;4265:6;4261:30;4314:3;4306:6;4303:15;4300:122;;;4333:79;;:::i;:::-;4300:122;4448:6;4431:220;4465:6;4460:3;4457:15;4431:220;;;4540:3;4569:37;4602:3;4590:10;4569:37;:::i;:::-;4564:3;4557:50;4636:4;4631:3;4627:14;4620:21;;4507:144;4491:4;4486:3;4482:14;4475:21;;4431:220;;;4435:21;4049:608;;3947:710;;;;;:::o;4680:370::-;4751:5;4800:3;4793:4;4785:6;4781:17;4777:27;4767:122;;4808:79;;:::i;:::-;4767:122;4925:6;4912:20;4950:94;5040:3;5032:6;5025:4;5017:6;5013:17;4950:94;:::i;:::-;4941:103;;4757:293;4680:370;;;;:::o;5056:684::-;5149:6;5157;5206:2;5194:9;5185:7;5181:23;5177:32;5174:119;;;5212:79;;:::i;:::-;5174:119;5332:1;5357:53;5402:7;5393:6;5382:9;5378:22;5357:53;:::i;:::-;5347:63;;5303:117;5487:2;5476:9;5472:18;5459:32;5518:18;5510:6;5507:30;5504:117;;;5540:79;;:::i;:::-;5504:117;5645:78;5715:7;5706:6;5695:9;5691:22;5645:78;:::i;:::-;5635:88;;5430:303;5056:684;;;;;:::o;5746:117::-;5855:1;5852;5845:12;5882:552;5939:8;5949:6;5999:3;5992:4;5984:6;5980:17;5976:27;5966:122;;6007:79;;:::i;:::-;5966:122;6120:6;6107:20;6097:30;;6150:18;6142:6;6139:30;6136:117;;;6172:79;;:::i;:::-;6136:117;6286:4;6278:6;6274:17;6262:29;;6340:3;6332:4;6324:6;6320:17;6310:8;6306:32;6303:41;6300:128;;;6347:79;;:::i;:::-;6300:128;5882:552;;;;;:::o;6440:527::-;6510:6;6518;6567:2;6555:9;6546:7;6542:23;6538:32;6535:119;;;6573:79;;:::i;:::-;6535:119;6721:1;6710:9;6706:17;6693:31;6751:18;6743:6;6740:30;6737:117;;;6773:79;;:::i;:::-;6737:117;6886:64;6942:7;6933:6;6922:9;6918:22;6886:64;:::i;:::-;6868:82;;;;6664:296;6440:527;;;;;:::o;6973:117::-;7082:1;7079;7072:12;7096:307;7157:4;7247:18;7239:6;7236:30;7233:56;;;7269:18;;:::i;:::-;7233:56;7307:29;7329:6;7307:29;:::i;:::-;7299:37;;7391:4;7385;7381:15;7373:23;;7096:307;;;:::o;7409:154::-;7493:6;7488:3;7483;7470:30;7555:1;7546:6;7541:3;7537:16;7530:27;7409:154;;;:::o;7569:410::-;7646:5;7671:65;7687:48;7728:6;7687:48;:::i;:::-;7671:65;:::i;:::-;7662:74;;7759:6;7752:5;7745:21;7797:4;7790:5;7786:16;7835:3;7826:6;7821:3;7817:16;7814:25;7811:112;;;7842:79;;:::i;:::-;7811:112;7932:41;7966:6;7961:3;7956;7932:41;:::i;:::-;7652:327;7569:410;;;;;:::o;7998:338::-;8053:5;8102:3;8095:4;8087:6;8083:17;8079:27;8069:122;;8110:79;;:::i;:::-;8069:122;8227:6;8214:20;8252:78;8326:3;8318:6;8311:4;8303:6;8299:17;8252:78;:::i;:::-;8243:87;;8059:277;7998:338;;;;:::o;8342:507::-;8410:6;8459:2;8447:9;8438:7;8434:23;8430:32;8427:119;;;8465:79;;:::i;:::-;8427:119;8613:1;8602:9;8598:17;8585:31;8643:18;8635:6;8632:30;8629:117;;;8665:79;;:::i;:::-;8629:117;8770:62;8824:7;8815:6;8804:9;8800:22;8770:62;:::i;:::-;8760:72;;8556:286;8342:507;;;;:::o;8855:90::-;8889:7;8932:5;8925:13;8918:21;8907:32;;8855:90;;;:::o;8951:109::-;9032:21;9047:5;9032:21;:::i;:::-;9027:3;9020:34;8951:109;;:::o;9066:98::-;9117:6;9151:5;9145:12;9135:22;;9066:98;;;:::o;9170:168::-;9253:11;9287:6;9282:3;9275:19;9327:4;9322:3;9318:14;9303:29;;9170:168;;;;:::o;9344:307::-;9412:1;9422:113;9436:6;9433:1;9430:13;9422:113;;;9521:1;9516:3;9512:11;9506:18;9502:1;9497:3;9493:11;9486:39;9458:2;9455:1;9451:10;9446:15;;9422:113;;;9553:6;9550:1;9547:13;9544:101;;;9633:1;9624:6;9619:3;9615:16;9608:27;9544:101;9393:258;9344:307;;;:::o;9657:360::-;9743:3;9771:38;9803:5;9771:38;:::i;:::-;9825:70;9888:6;9883:3;9825:70;:::i;:::-;9818:77;;9904:52;9949:6;9944:3;9937:4;9930:5;9926:16;9904:52;:::i;:::-;9981:29;10003:6;9981:29;:::i;:::-;9976:3;9972:39;9965:46;;9747:270;9657:360;;;;:::o;10023:407::-;10156:4;10194:2;10183:9;10179:18;10171:26;;10207:65;10269:1;10258:9;10254:17;10245:6;10207:65;:::i;:::-;10319:9;10313:4;10309:20;10304:2;10293:9;10289:18;10282:48;10347:76;10418:4;10409:6;10347:76;:::i;:::-;10339:84;;10023:407;;;;;:::o;10436:329::-;10495:6;10544:2;10532:9;10523:7;10519:23;10515:32;10512:119;;;10550:79;;:::i;:::-;10512:119;10670:1;10695:53;10740:7;10731:6;10720:9;10716:22;10695:53;:::i;:::-;10685:63;;10641:117;10436:329;;;;:::o;10771:332::-;10892:4;10930:2;10919:9;10915:18;10907:26;;10943:71;11011:1;11000:9;10996:17;10987:6;10943:71;:::i;:::-;11024:72;11092:2;11081:9;11077:18;11068:6;11024:72;:::i;:::-;10771:332;;;;;:::o;11109:180::-;11157:77;11154:1;11147:88;11254:4;11251:1;11244:15;11278:4;11275:1;11268:15;11295:180;11343:77;11340:1;11333:88;11440:4;11437:1;11430:15;11464:4;11461:1;11454:15;11481:233;11520:3;11543:24;11561:5;11543:24;:::i;:::-;11534:33;;11589:66;11582:5;11579:77;11576:103;;;11659:18;;:::i;:::-;11576:103;11706:1;11699:5;11695:13;11688:20;;11481:233;;;:::o;11720:442::-;11869:4;11907:2;11896:9;11892:18;11884:26;;11920:71;11988:1;11977:9;11973:17;11964:6;11920:71;:::i;:::-;12001:72;12069:2;12058:9;12054:18;12045:6;12001:72;:::i;:::-;12083;12151:2;12140:9;12136:18;12127:6;12083:72;:::i;:::-;11720:442;;;;;;:::o;12168:77::-;12205:7;12234:5;12223:16;;12168:77;;;:::o;12251:118::-;12338:24;12356:5;12338:24;:::i;:::-;12333:3;12326:37;12251:118;;:::o;12375:101::-;12411:7;12451:18;12444:5;12440:30;12429:41;;12375:101;;;:::o;12482:115::-;12567:23;12584:5;12567:23;:::i;:::-;12562:3;12555:36;12482:115;;:::o;12603:89::-;12639:7;12679:6;12672:5;12668:18;12657:29;;12603:89;;;:::o;12698:115::-;12783:23;12800:5;12783:23;:::i;:::-;12778:3;12771:36;12698:115;;:::o;12819:93::-;12855:7;12895:10;12888:5;12884:22;12873:33;;12819:93;;;:::o;12918:115::-;13003:23;13020:5;13003:23;:::i;:::-;12998:3;12991:36;12918:115;;:::o;13039:648::-;13236:4;13274:3;13263:9;13259:19;13251:27;;13288:71;13356:1;13345:9;13341:17;13332:6;13288:71;:::i;:::-;13369:70;13435:2;13424:9;13420:18;13411:6;13369:70;:::i;:::-;13449;13515:2;13504:9;13500:18;13491:6;13449:70;:::i;:::-;13529;13595:2;13584:9;13580:18;13571:6;13529:70;:::i;:::-;13609:71;13675:3;13664:9;13660:19;13651:6;13609:71;:::i;:::-;13039:648;;;;;;;;:::o;13693:143::-;13750:5;13781:6;13775:13;13766:22;;13797:33;13824:5;13797:33;:::i;:::-;13693:143;;;;:::o;13842:351::-;13912:6;13961:2;13949:9;13940:7;13936:23;13932:32;13929:119;;;13967:79;;:::i;:::-;13929:119;14087:1;14112:64;14168:7;14159:6;14148:9;14144:22;14112:64;:::i;:::-;14102:74;;14058:128;13842:351;;;;:::o;14199:191::-;14239:4;14259:20;14277:1;14259:20;:::i;:::-;14254:25;;14293:20;14311:1;14293:20;:::i;:::-;14288:25;;14332:1;14329;14326:8;14323:34;;;14337:18;;:::i;:::-;14323:34;14382:1;14379;14375:9;14367:17;;14199:191;;;;:::o;14396:169::-;14480:11;14514:6;14509:3;14502:19;14554:4;14549:3;14545:14;14530:29;;14396:169;;;;:::o;14571:227::-;14711:34;14707:1;14699:6;14695:14;14688:58;14780:10;14775:2;14767:6;14763:15;14756:35;14571:227;:::o;14804:366::-;14946:3;14967:67;15031:2;15026:3;14967:67;:::i;:::-;14960:74;;15043:93;15132:3;15043:93;:::i;:::-;15161:2;15156:3;15152:12;15145:19;;14804:366;;;:::o;15176:419::-;15342:4;15380:2;15369:9;15365:18;15357:26;;15429:9;15423:4;15419:20;15415:1;15404:9;15400:17;15393:47;15457:131;15583:4;15457:131;:::i;:::-;15449:139;;15176:419;;;:::o;15601:180::-;15649:77;15646:1;15639:88;15746:4;15743:1;15736:15;15770:4;15767:1;15760:15;15787:176;15819:1;15836:20;15854:1;15836:20;:::i;:::-;15831:25;;15870:20;15888:1;15870:20;:::i;:::-;15865:25;;15909:1;15899:35;;15914:18;;:::i;:::-;15899:35;15955:1;15952;15948:9;15943:14;;15787:176;;;;:::o;15969:147::-;16070:11;16107:3;16092:18;;15969:147;;;;:::o;16122:114::-;;:::o;16242:398::-;16401:3;16422:83;16503:1;16498:3;16422:83;:::i;:::-;16415:90;;16514:93;16603:3;16514:93;:::i;:::-;16632:1;16627:3;16623:11;16616:18;;16242:398;;;:::o;16646:379::-;16830:3;16852:147;16995:3;16852:147;:::i;:::-;16845:154;;17016:3;17009:10;;16646:379;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1194800","executionCost":"infinite","totalCost":"infinite"},"external":{"checkUpkeep(bytes)":"infinite","enterRaffle()":"infinite","getEntranceFee()":"infinite","getInterval()":"2459","getLatestTimeStamp()":"2504","getNumWords()":"388","getNumberOfPlayers()":"2533","getPlayer(uint256)":"5033","getRaffleOwner()":"2612","getRaffleState()":"2664","getRecentWinner()":"2545","getRequestConfirmations()":"410","moneyInContract()":"407","performUpkeep(bytes)":"infinite","rawFulfillRandomWords(uint256,uint256[])":"infinite","updateInterval(uint256)":"24731"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"infinite"}},"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","enterRaffle()":"2cfcc539","getEntranceFee()":"09bc33a7","getInterval()":"91ad27b4","getLatestTimeStamp()":"320229eb","getNumWords()":"53a2c19a","getNumberOfPlayers()":"fd6673f5","getPlayer(uint256)":"e55ae4e8","getRaffleOwner()":"19a6ac84","getRaffleState()":"115cbaf5","getRecentWinner()":"473f1ddc","getRequestConfirmations()":"5f1b0fd8","moneyInContract()":"173e4241","performUpkeep(bytes)":"4585e33b","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","updateInterval(uint256)":"d0f07926"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__AlreadyEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moneyInContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"updateInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mert Kaya\",\"details\":\"This implements Chainlink VRF v2 and Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for the `upkeepNeeded` to return true. The following should be true in order to return true. 1. Our time interval should have passed 2. The lottery should have at least 1 player, and have some ETH 3. Our subscription is funded with LINK 4. The lottery should be in an \\\"open\\\" state. Smg that we want to avoid when we are waiting for a random number to return and when we have requested a random winner, we are technically in this weird limbo state where we are waiting for a random number to be returned, and we really shouldn't allow any new players to join. So we need to create a state variable telling us whether the lottery is open or not, and while we are waiting for a random number to get back, we will be in a closed or a calculated state.\"}},\"title\":\"A sample Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating an untamperable de-cent smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// Raffle\\r\\n// Enter the lottery (paying some amount)\\r\\n// Pick a random winner (verifiably random)\\r\\n// Winner to be selected every X minutes -> Completely automated\\r\\n// Chainlink oracle -> Randomness + Automated Execution (VRF + Chainlink Keepers)\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\"; // To change the functions of the CL contract for our own usage!\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\"; // To get in touch with the orginal contract!\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\"; // To make sure we wrote these functions!\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror Raffle__NotEnoughETHEntered();\\r\\nerror Raffle__TransferFailed();\\r\\nerror Raffle__NotOpen();\\r\\nerror Raffle__UpKeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\r\\nerror Raffle__AlreadyEntered();\\r\\n\\r\\n/** @title A sample Raffle Contract\\r\\n *  @author Mert Kaya\\r\\n *  @notice This contract is for creating an untamperable de-cent smart contract\\r\\n *  @dev This implements Chainlink VRF v2 and Chainlink Keepers\\r\\n */\\r\\n\\r\\n// We need to implement an interface for showing the contract to how to connect with other contract's functions!\\r\\n\\r\\n// interface VRFCoordinatorV2Interface {\\r\\n//     function requestRandomWords(\\r\\n//         bytes32 keyHash,\\r\\n//         uint64 subId,\\r\\n//         uint16 minimumRequestConfirmations,\\r\\n//         uint32 callbackGasLimit,\\r\\n//         uint32 numWords\\r\\n//     ) external returns (uint256 requestId);\\r\\n// }\\r\\n\\r\\n// We apply inheritance on VRF2ConsumerBaseV2 for getting the fulfillRandomWords function\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\r\\n    /* Type Declarations */\\r\\n    enum RaffleState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    } // uint256 0 = OPEN, uint256 1 = CALCULATING\\r\\n\\r\\n    /* State Variables */\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator; // Address of the chainlink VRF Coordinator Contract\\r\\n    bytes32 private immutable i_gasLane; // Aka key hash value. Max gas price you are willing to pay for a request in wei\\r\\n    uint64 private immutable i_subscriptionId; // Subs ID that this contract uses for funding requests\\r\\n    uint32 private immutable i_callbackGasLimit; // The limit for how much gas to use for the callback request to your contract's fulfillRandomWords()\\r\\n    uint16 private constant REQUEST_CONFIRMATION = 3;\\r\\n    uint32 private constant NUM_WORDS = 1; // Random generated item count\\r\\n    address private raffleOwner;\\r\\n\\r\\n    // Lottery Variables\\r\\n    uint256 private immutable i_entranceFee; // Entrance fee to the lottery\\r\\n    address payable[] private s_players; // When one of the players wins, we need to pay them\\r\\n    address private s_recentWinner;\\r\\n    RaffleState private s_raffleState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint256 private interval;\\r\\n\\r\\n    /* Events */\\r\\n    event RaffleEnter(address indexed player);\\r\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\r\\n    event WinnerPicked(address indexed winner);\\r\\n\\r\\n    // We have the address being passed to VRFConsumerBaseV2\\r\\n    // VRFConsumerBaseV2 is the contract that makes sure the generation of VRF\\r\\n    // We need to pass VRFConsumerBaseV2's constructor and pass that vrfCoordinatorV2\\r\\n    // vrfCoordinatorV2 is the address of the contract that does the random number verification\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        uint256 entranceFee,\\r\\n        bytes32 gasLane,\\r\\n        uint64 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint256 _interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2); // Now we can connect with the CL contracts for corresponding networks\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        interval = _interval;\\r\\n        raffleOwner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier checkIfAlreadyEntered() {\\r\\n        for (uint i = 0; i < s_players.length; i++) {\\r\\n            if (s_players[i] == msg.sender) revert Raffle__AlreadyEntered();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkIfRaffleStateOpen() {\\r\\n        if (s_raffleState != RaffleState.OPEN) revert Raffle__NotOpen();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkIfEnoughEthEntered() {\\r\\n        if (msg.value < i_entranceFee) revert Raffle__NotEnoughETHEntered();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function enterRaffle()\\r\\n        public\\r\\n        payable\\r\\n        checkIfRaffleStateOpen\\r\\n        checkIfAlreadyEntered\\r\\n        checkIfEnoughEthEntered\\r\\n    {\\r\\n        // require(msg.value < i_entraceFee, \\\"Not Enough ETH!\\\");\\r\\n        s_players.push(payable(msg.sender));\\r\\n        // Emit an event when we update a dynamic array or mapping\\r\\n        // Named events with the function name reversed\\r\\n        emit RaffleEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This is the function that the Chainlink Keeper nodes call\\r\\n     * they look for the `upkeepNeeded` to return true.\\r\\n     * The following should be true in order to return true.\\r\\n     * 1. Our time interval should have passed\\r\\n     * 2. The lottery should have at least 1 player, and have some ETH\\r\\n     * 3. Our subscription is funded with LINK\\r\\n     * 4. The lottery should be in an \\\"open\\\" state.\\r\\n     * Smg that we want to avoid when we are waiting for a random number to return and when we have requested a random winner, we are technically\\r\\n     * in this weird limbo state where we are waiting for a random number to be returned, and we really shouldn't allow any new players to join.\\r\\n     * So we need to create a state variable telling us whether the lottery is open or not, and while we are waiting for a random number to\\r\\n     * get back, we will be in a closed or a calculated state.\\r\\n     *\\r\\n     */\\r\\n\\r\\n    // We define some conditions to be checked in order to run performUpKeep function!\\r\\n    // Off-chain computation, a node runs the checkUpkeep function.\\r\\n    // If it returns upkeepNeeded then it will run performUpkeep on chain.\\r\\n    // Generate data off-chain and if it returns true, then we run performUpKeep in the chain.\\r\\n\\r\\n    // KeeperCompatibleInterface\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory /* checkData */\\r\\n    ) public view override returns (bool upkeepNeeded, bytes memory /* performData */) {\\r\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\r\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > interval);\\r\\n        bool hasPlayers = (s_players.length > 0);\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\r\\n        return (upkeepNeeded, \\\"\\\");\\r\\n\\r\\n        // If upkeepNeded is true, its time to end the lottery and it's time to request a new VRF\\r\\n        // block.timestamp - last block timestamp > interval  To calculate if enough time is passed, we need to subtract last block timestamp\\r\\n        // interval is gonna be a some number is seconds to determine how long we want to wait between lottery runs.\\r\\n    }\\r\\n\\r\\n    // Having this checkData be a type bytes means that we can even specify this to call other functions.\\r\\n    // There is a lot of advanced things you can do by just having input parameter as type of bytes.\\r\\n    // However for now, we are not gonna use this checkData piece.\\r\\n\\r\\n    // 14:47:50 Rename requestRandomWinner() to performUpKeep(bytes calldata /* performData */)\\r\\n\\r\\n    // KeeperCompatibleInterface\\r\\n    function performUpkeep(\\r\\n        bytes calldata /* performData */ // calldata actually doesn't work with strings\\r\\n    ) external override {\\r\\n        // This func will be called by the chanlink keeper network so that it will run automatically without us having to interact with it\\r\\n        // 1 - Request the random number\\r\\n        // 2 - Once we get it, do smg with it\\r\\n        // 2 txn process\\r\\n        /* Having random numbers in 2 txns is actually also much better than having it in one. It it was just 1 txn, then people just brute force tries simulating\\r\\n         calling this txn to see what they can manipulate to make sure that they are the winner. We want to make sure that this is absolutely fair. This func\\r\\n         gonna request it and then in a second func random number to number is gonna be returned and then the txn that we actually get the random number from\\r\\n         the chain link network that's when we are gonna actually send the money to the winner. The func that calls VRF is fullfillRandomWords \\r\\n        */\\r\\n        // We are gonna set this up so that the CL Keepers call this on an interval.\\r\\n\\r\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        if (!upKeepNeeded) {\\r\\n            revert Raffle__UpKeepNotNeeded(\\r\\n                address(this).balance,\\r\\n                s_players.length,\\r\\n                uint256(s_raffleState)\\r\\n            ); // We are gonna pass some vars so whoever was running into this bug can see why they are getting this error\\r\\n        }\\r\\n\\r\\n        s_raffleState = RaffleState.CALCULATING;\\r\\n\\r\\n        // Which requests to the contract for corresponding network i_vrfCoordinator.requestRandomWords\\r\\n        // VRFCoordinatorV2Interface\\r\\n\\r\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane, //keyHash, //gasLane\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATION,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        // This is redundant since VRFCoordinatorV2 already emits that parameter. But for this course we leave it\\r\\n        emit RequestedRaffleWinner(requestId);\\r\\n    }\\r\\n\\r\\n    // When we trigger the i_vrfCoordinator.requestRandomWords, it gives us a random number inside randomWords[0]. Since we write the\\r\\n    // i_vrfCoordinator.requestRandomWords inside performUpKeep, it's gonna create random variable periodically in terms of our defined\\r\\n    // conditions inside checkUpKeep.\\r\\n\\r\\n    // In order to call fulfillRandomWords, we are passing VRFConsumerBaseV2\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 /*requestId*/, // Since we dont use requestId, but we still need. It's like hey we know u need uint256 but we won't use requestId\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        // s_players size 10\\r\\n        // randomNumber 200\\r\\n        // 202 % 10 = 2\\r\\n        // ..... bla bla bla many condes to get randomWords !!!\\r\\n\\r\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\r\\n        address payable recentWinner = s_players[indexOfWinner];\\r\\n        s_recentWinner = recentWinner;\\r\\n        s_raffleState = RaffleState.OPEN; // Reset the RaffleState\\r\\n        s_players = new address payable[](0); // Reset the s_players array!!!\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\"); // Send all the money inside the contract!\\r\\n\\r\\n        // require(success)\\r\\n        if (!success) {\\r\\n            revert Raffle__TransferFailed();\\r\\n        }\\r\\n        emit WinnerPicked(recentWinner);\\r\\n    }\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns (RaffleState) {\\r\\n        return s_raffleState;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint256) {\\r\\n        return NUM_WORDS; // It doesn't read from storage\\r\\n    }\\r\\n\\r\\n    function getNumberOfPlayers() public view returns (uint256) {\\r\\n        return s_players.length;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return interval;\\r\\n    }\\r\\n\\r\\n    function updateInterval(uint _interval) public {\\r\\n        require(msg.sender == raffleOwner, \\\"Only raffleOwner can change the interval\\\");\\r\\n        interval = _interval;\\r\\n    }\\r\\n\\r\\n    function getLatestTimeStamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getRequestConfirmations() public pure returns (uint256) {\\r\\n        return REQUEST_CONFIRMATION;\\r\\n    }\\r\\n\\r\\n    function moneyInContract() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getRaffleOwner() public view returns (address) {\\r\\n        return raffleOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9732bee8fc231c5720fdef67e1f5454b15628f788cd564bad01df40611f48611\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":277,"contract":"contracts/Raffle.sol:Raffle","label":"raffleOwner","offset":0,"slot":"0","type":"t_address"},{"astId":282,"contract":"contracts/Raffle.sol:Raffle","label":"s_players","offset":0,"slot":"1","type":"t_array(t_address_payable)dyn_storage"},{"astId":284,"contract":"contracts/Raffle.sol:Raffle","label":"s_recentWinner","offset":0,"slot":"2","type":"t_address"},{"astId":287,"contract":"contracts/Raffle.sol:Raffle","label":"s_raffleState","offset":20,"slot":"2","type":"t_enum(RaffleState)260"},{"astId":289,"contract":"contracts/Raffle.sol:Raffle","label":"s_lastTimeStamp","offset":0,"slot":"3","type":"t_uint256"},{"astId":291,"contract":"contracts/Raffle.sol:Raffle","label":"interval","offset":0,"slot":"4","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"},"t_enum(RaffleState)260":{"encoding":"inplace","label":"enum Raffle.RaffleState","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"notice":"This contract is for creating an untamperable de-cent smart contract","version":1}}}}}}